%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 9.0
%%For: (Computer Science) (University of Bristol)
%%Title: (logo-black.eps)
%%CreationDate: 5/20/2005 9:59 AM
%%BoundingBox: -72 321 669 536
%%HiResBoundingBox: -71.728 321.7051 668.1309 535.5435
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKCustomColor: 0 0.91 0.76 0.06 (PANTONE 186 CVC)
%%+ 0 0.91 0.72 0.23 (PANTONE 187 CVC)
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 131071 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: -94.7065 -109.5811 475.2935 707.4189
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 841.8898 595.2756
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -453 883.8887 0.5 778 491 18 1 0 11 68 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-94.7065 -109.5811
%%AI3_PaperRect:-12 829 583 -13
%%AI3_Margin:12 -12 -13 13
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 128 40 8
%%BeginData: 7192 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45F8F8F827FF52F827FF52F827FF52F8F8F852FF7DFD05FF2752FD08
%FF52A8FD5BFFF8F8F8277D52F8277D52F8277D52F8F8F87DFF52FD04FFF8
%27FD08FF277DFD5CFFFD11F852FF27FFFFFF7DF852FD06FFA82752FD5DFF
%FD11F87DFFF8A8FFFF7DF827FD05FFA8F827A8FD5DFFFD05F827527D52FD
%08F852FFF8A8FFFF27F8F8FD04FF7DF827A8FD5EFFFD07F827527D52FD06
%F87DFFF852A827F8F8F8A8FFA852F8F87DFD5FFFFD06F827A8FFFF52F827
%FD04F852FFF85252F8F8F852FFA827F8F852FD1FFFA8FD3BFF527DFFFFFF
%FD04F852A8A8FFFFFFF82752FD04F87DFFF8F827F8F827FF7DF8F8F827FD
%0AFF52F8F8F87DFFFFFFA827F8F852FD09FF2752FD1BFF2752FD1BFF5252
%7DF87DFFFFF8F8F8A8FF27FD04FF27A87DFD04F852FFFD05F8FF7DFD04F8
%FD0CFF7DF852FD06FF27A8FD0AFFA8FD38FF7D52FD06FFF8F8F8FFFF27FD
%04FF52FD06F87DFFFD05F827FD04F8A8FD06FF7DFD05FF52F87DFD06FF27
%7DFD2BFF7DA8FD16FF277DFD06FFF8F8F8527DF87D27F827A8272727F8F8
%F852FFFD09F852FFA8527D7DA8277DFD05FF7DF8A8FD06FF27A8FFFF7DFF
%A87DA8FFFFFF7D7DFD05A8FFA8A8A8FFA87D7DFFFFFFA87DA8A8FFFFA87D
%A8FFFFA87DFFFF277DA8A8A87DA8A8FF7DA8A8FD05FFA87D7DFD04FFF852
%A8FD05FFF8F8A852FD06F852FFFF52F8F8F87DFFFD08F827FF7DFD05F827
%A8FD05FF52F87DFD06FF277DA8F8F8272727F8A8FF27F827FF27F8F8A8A8
%27F87D52527D27F8FF27F8F827F85252272727FF52F827FF52F82727A827
%F8F8A8FF7DF852FD04FF27277D7DF87DFF27F82727FD05FFF8F8275227A8
%FF525227FFFFFFFD04F852FFFD08F87D52FD05F852A8FD06FF7DF8A8FD06
%FF27A8FF52F8A8FFFFF87DFFFF2752FFFFF87DFFFF52A8A8F87DA87DF87D
%FF2727A8FFFF5252FF7DFFFF5227FFFFF8A8FFFFFF27F8FFFF7D52FD04FF
%7D27FFFFFF7DF8FFFFF852FD06FFFD05F827FFFF7D7DA8FF7DFD04F87DFF
%FD04F827FD07F827A8FD09FF52F87DFD06FF277DFF52F8FFFFFFF852FFFF
%2727FFFF7DF8FFA827FF7D27A87DA87DFFFF2727FFFFFF52F827FFFFFF52
%27FFFFF8A8FFFFFFA8F87DFF52A8FD04FF2727FFFFFFA8F852FFF87DFD06
%FFFD06F852F87D5252FD06F852FFFD05F87DFD06F8A8FD0AFFA8F87DFD06
%FFF8A8FF7DF8FFFFFFF87DFFFF2752FFFFA8F87D7D7DFF5227FD06FF2727
%FD04FF7D27F8FFFF7D27FFFFF8A8FD04FF52F8FF27FD05FF2727FD04FFF8
%7DFFF852FD06FFFD05F8272727FD09F87DFFFD05F87D27F8F8277DA8FD0B
%FFA8F8F8FD05FF5227FFFF52F8FFFFFFF87DFFFF2727FFFFFF272727FFFF
%A8F8A8FFFF7DA8FF2727FFFFFF7DFF7DF87DFF5227FFFFF8A8FD04FFA8F8
%F87DFD05FF7DF8FFFFFFA8F8A8FFF87DFD06FFFD0BF827522752F8F852FF
%F8F8275227A852F8F8F8277DA8FD0BFF7D27F87D527D2727A8FFA827F852
%FF7DF852A852F8277DFFFFFFF87DFFFFFF27F87D2727FFA8F8277DFFFF52
%52A8F8FF52F8F87DFF272752A8FFFFFF2727FD07FF2727FFA82752FF52F8
%F8A8FD05FF2727FD05F82752A8FD06FFA8A8FF7DFD06FFA87D2727FD05F8
%7DA8FD07FFA87D2727277DA8FFFFA8527D52FF527D52A8527D527DFFFFFF
%7DA8FFFFFFA87D277DA8FF7D7D527DA8FF7D7D52A8FF7D527D52FFA852A8
%FD04FF7D52FD08FF7D527D7DFFFF7D527D52A8FD07FFA8A8FD04FF7D7D27
%27F852527DA8FFA8522727F827527DA8FFFFFFA8A8A8FD45FF52FD18FFF8
%5252A87D7D5227FD09F87DFFFD0AF85252A87D7D522752FD41FF7D27FD18
%FFFD11F852FFFD11F87DFD40FF7DF8A8FD18FFFD07F852FD09F87DFFFD06
%F827FD06F827A827F852FD41FFA8FD19FFFD05F827FFA87D27FD07F852FF
%FD05F87DA87DFD04F827A827F8F87DFD04FFA8A8527D527D527D7DA8FD04
%FF7D7D527D527D52A8A8FD07FF7DA8A8A87DFFFFFF7D7D277D7DA8FFFF27
%A8A8A87DA8A8A87DA8A8A827FD05FFA87D5252527DA8FD05FFA8A87DFD04
%A8FD04FFFD04F827FFA87D527DFD07F87DFFFD04F8527D7DA852F8F8F852
%7D7DF8F852FD05FF7D27F8F87DA87D7DF8F87DFFA87DF8F827A87D7D27F8
%52FD05FFA87DF8F8F87DA8FF27277DA87D27F8A8A8F8F8272727F8F8F8FD
%0427F8FFFFFFA827277DA87D7D27F827A8FFFFA87DF8F8F87D7DFD05FFFD
%04F8A8FD06FF52FD05F852FFFD04F87D5252FF52FD04F8A8FF52F87DFD06
%FFA8F8F8FD04FFA8F8F8A8FFFFA8F852FD04FF27F827FD06FF52F87DFFFF
%52F8A8FD04FF27A8A827FD04FF7DF87DFD04FF27A8FF7DF852FD06FF7DF8
%F87DFFFFFF7DF87DFD07FFFD04F8A8FFFFFFA87DFFFF52FD04F87DFFFD05
%F827FFFF52FD05F8FF27F852FD06FFA8F8F8FD05FF27F87DFFFF7DF827FD
%04FFA8F8F8A8FD05FF27F852FFFF27F8A8FD04FFFD047DFD04FF52F852FD
%04FF7D7DA8F827FD08FF52F8F8A8FFFF52F852FD07FFF8F8F827FD04FF27
%27FFFFFFFD04F852FFFD05F87DFFFFA8272752F8277D27F87DFD06FFA8F8
%F8FD05FF27F87DFFFFA8F852FD05FFF8F8A8FD05FF27F87DFFFF27F827FD
%0CFF7DF87DFD06FFF8F8A8FD09FF27F827FFFF7DF87DFD07FFF8F8F87DFF
%FFFFA8F8F8F8A8FF27F8F8F87DFFF8F8F82727FD07FFA8FD04F852FD06FF
%A8F8F8FD04FF7DF827FFFFFF7DF827FD04FFA8F8F8A8FD05FF27F852FFFF
%A8F8F827A8FD0AFF52F852FD05FF7DF8F8FD0AFF7DF8F8A8FF52F852FD07
%FFF8F8F8A8FFA8FF27F8F8F827FF27F8F8F852FFF8F827F827FD08FF7DF8
%F8F87DFD06FFA8F8F852275227F827FD04FFA8F852FD04FF52F827FD06FF
%52F87DFFFFFFA8F8F8F87DFD09FF7DF87DFD05FF7DF852FD0AFFA8F8F8A8
%FF7DF87DFD07FFF8F8F87DFF52F827F8F8F8527DFD04F87DFFF8F852277D
%527DFD06FF27F8F8F852FD06FFA8F8F8FFFFFF7D27F827FFFFFF7DF827FF
%FFFF52F852FD07FF27F852FD04FFA827F8F827A8FD07FF52F852FD05FF52
%F827FD0BFFF8F87DFF52F852FD07FFFD04F8A85252F8F8F8527D27F827F8
%F852FFF8F8272752F8F8FD0427A8A8FD04F87DFD06FF7DF8F8FD05FF27F8
%27FFFFA8F8275252F8F8F8A8FD07FF52F87DFD06FF52F8F827A8FD06FF7D
%F87DFD05FF7DF827FD0BFFF8F8A8FF7DF87DFD07FFFD05F82752F8F8FFFF
%7D5252F8F8F87DFFFD04F852FD06F827A8FD04F852FD06FFA8F8F8FD05FF
%7DF8F8A8FF7DF827FFFFA827F8F8A8FD06FF27F852FD07FFA8F8F827FD06
%FF52F852FD05FF52F8F8FD0AFFA8F8F8FFFF52F852FD07FFFD06F827F87D
%A87DFFFF7DF8F8F852FFFD05F827FD04F827275252F8F8F87DFD06FFA8F8
%F8FD05FFA8F8F8A8FFA8F852FD04FF27F8F8A8FD05FF52F87DFD08FFA8F8
%F8FD06FF7DF87DFD06FFF8F87DFD09FF7DF852FFFF7DF87DFD07FFFD09F8
%52F8F8F827F8F8F87DFFFD09F82727F87DFD04F852FD06FFA8F8F8FD05FF
%7DF827FFFF7DF827FD05FF27F8F8A8FD04FF27F852FFFF27FD06FF27F8FD
%06FF52F852FD06FF52F8F8A8FD07FFA827F8A8FFFF52F852FD06FF27FD11
%F852FFFD09F827F85227FD04F87DFD06FFA8F8F8FD05FF27F852FFFFA8F8
%52FD06FF27F8F8A8FFFFFF27F87DFFFF277DFD05FF27F8FD06FF7DF87DFD
%06FFA827F827A8FD06FF52F8A8FFFFFF7DF852FD05FF5252FD0BF8FD0427
%F8F87DFFF8F8FD0427FD0BF852FD04FFA87D52F8F8F87D7D7DF8F827FFA8
%A827F8F8A87DFD05FF52F8F87D7DA8F8F8F8A8A852F87DA8FFA827F8A8FD
%04FF7DA8F8F8F8A87DFD06FF7DF8F852FFFFFF7D27F8A8FFFFA8A827F8F8
%52527D5227F8FF52FD06F827527DFD06FFA8A8FF7DFD06FFA85227FD05F8
%2727A8FD04FF7D7D527D527D527D527DA8FFFFA8527D527D527DFD06FFA8
%7D527D527D527D52FFA87D5252275252FD06FF7D527D527D527DFD08FF7D
%52275227527DFD04FFA8527D527D527D527D52A8FD05FF7DA8FD18FFA8A8
%A8FDFCFFFD62FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
4 Bn
%AI5_BeginGradient: (Black, White)
(Black, White) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Chrome)
(Chrome) 0 6 Bd
[
0
<
464646454545444444444343434342424241414141404040403F3F3F3E3E3E3E3D3D3D3C3C3C3C3B
3B3B3B3A3A3A39393939383838383737373636363635353535343434333333333232323131313130
3030302F2F2F2E2E2E2E2D2D2D2D2C2C2C2B2B2B2B2A2A2A2A292929282828282727272626262625
2525252424242323232322222222212121202020201F1F1F1F1E1E1E1D1D1D1D1C1C1C1B1B1B1B1A
1A1A1A1919191818181817171717161616151515151414141413131312121212111111101010100F
0F0F0F0E0E0E0D0D0D0D0C0C0C0C0B0B0B0A0A0A0A09090909080808070707070606060505050504
04040403030302020202010101010000
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
1F1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1A1A1A1A1A
1A1A1A19191919191919191818181818181818181717171717171717161616161616161615151515
15151515151414141414141414131313131313131312121212121212121211111111111111111010
1010101010100F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C
0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A090909090909090909080808080808080807070707070707
07060606060606060606050505050505050504040404040404040303030303030303030202020202
02020201010101010101010000000000
>
1 %_Br
0
0.275
1
<
6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544
434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F
>
1 %_Br
0
<
00000101010102020202030303040404040505050606060607070707080808090909090A0A0A0A0B
0B0B0C0C0C0C0D0D0D0D0E0E0E0F0F0F0F1010101111111112121212131313141414141515151516
161617171717181818181919191A1A1A1A1B1B1B1C1C1C1C1D1D1D1D1E1E1E1F1F1F1F2020202021
212122222222232323232424242525252526262627272727282828282929292A2A2A2A2B2B2B2B2C
2C2C2D2D2D2D2E2E2E2E2F2F2F303030303131313232323233333333343434353535353636363637
373738383838393939393A3A3A3B3B3B3B3C3C3C3D3D3D3D3E3E3E3E3F3F3F404040404141414142
42424343434344444444454545464646
>
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
00000101020203030304040505050606070708080809090A0A0B0B0B0C0C0D0D0D0E0E0F0F101010
1111121212131314141515151616171718181819191A1A1A1B1B1C1C1D1D1D1E1E1F1F1F20202121
222222232324242525252626272727282829292A2A2A2B2B2C2C2D2D2D2E2E2F2F2F303031313232
32333334343435353636373737383839393A3A3A3B3B3C3C3C3D3D3E3E3F3F3F4040414142424243
4344444445454646474747484849494A4A4A4B4B4C4C4C4D4D4E4E4F4F4F50505151515252535354
54545555565657575758585959595A5A5B5B5C5C5C5D5D5E5E5E5F5F606061616162626363646464
6565666666676768686969696A6A6B6B
>
1 %_Br
1
0 %_Br
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
4D4C4C4C4B4B4B4A4A4A4A4949494848484747474746464645454544444444434343424242414141
414040403F3F3F3E3E3E3E3D3D3D3C3C3C3B3B3B3B3A3A3A39393938383838373737363636353535
35343434333333323232323131313030302F2F2F2F2E2E2E2D2D2D2C2C2C2C2B2B2B2A2A2A292929
2928282827272726262626252525242424232323232222222121212020201F1F1F1F1E1E1E1D1D1D
1C1C1C1C1B1B1B1A1A1A191919191818181717171616161615151514141413131313121212111111
101010100F0F0F0E0E0E0D0D0D0D0C0C0C0B0B0B0A0A0A0A09090908080807070707060606050505
04040404030303020202010101010000
>
0
0
1 %_Br
[
1 0 50 92 %_BS
%_1 0 50 92 Bs
0 0.275 1 0.12 1 50 59 %_BS
%_0 0.275 1 0.12 1 50 59 Bs
0 0.275 1 0.42 1 50 50 %_BS
%_0 0.275 1 0.42 1 50 50 Bs
1 0 50 49 %_BS
%_1 0 50 49 Bs
1 0 50 41 %_BS
%_1 0 50 41 Bs
1 0.3 0 0 1 50 0 %_BS
%_1 0.3 0 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Rainbow)
(Rainbow) 0 6 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
1
0
0
1 %_Br
1
<
0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E
2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F50515253545556
5758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E
7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6
A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCE
CFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6
F7F8F9FAFBFCFDFEFF
>
0
0
1 %_Br
1
<
00000000000000000000000000000000000001010101010101010101010101010101010101010101
01010101010101010101010101010202020202020202020202020202020202020202020202020202
02020202020202020202030303030303030303030303030303030303030303030303030303030303
03030303030304040404040404040404040404040404040404040404040404040404040404040404
04040505050505050505050505050505050505050505050505050505050505050505050505050606
06060606060606060606060606060606060606060606060606060606060606060607070707070707
07070707070707070707070707070707
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
0
1
0
1 %_Br
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
1
0
1 %_Br
[
0 1 0 0 1 50 100 %_BS
%_0 1 0 0 1 50 100 Bs
1 1 0 0 1 50 80 %_BS
%_1 1 0 0 1 50 80 Bs
1 0.0279 0 0 1 50 60 %_BS
%_1 0.0279 0 0 1 50 60 Bs
1 0 1 0 1 50 40 %_BS
%_1 0 1 0 1 50 40 Bs
0 0 1 0 1 50 20 %_BS
%_0 0 1 0 1 50 20 Bs
0 1 1 0 1 50 0 %_BS
%_0 1 1 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Orange Radial)
(Yellow & Orange Radial) 1 2 Bd
[
0
<
0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122
232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748
494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F
707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C
>
<
FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9
F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2
F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEB
EBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E6
>
0
1 %_Br
[
0 0 1 0 1 52 19 %_BS
%_0 0 1 0 1 52 19 Bs
0 0.55 0.9 0 1 50 100 %_BS
%_0 0.55 0.9 0 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 XR
10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d0 XR
8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(New Pattern 1)
0 A
u1 Ap
0 J 0 j 1 w 4 M []0 d0 XR
-7842.75 8611.8896 m
-7842.75 8587.8896 L
-7892.75 8587.8896 L
-7892.75 8611.8896 L
-7842.75 8611.8896 L
nu0 Ap
0 O
1 g
-7862.75 8609.8896 m
-7874.96 8612.9424 -7883.4434 8602.9502 -7892.75 8595.8408 C
F-7852.75 8609.8896 m
-7869.1279 8613.9844 -7878.8008 8594.6123 -7892.75 8590.2051 C
F-7892.75 8589.8896 m
-7872.75 8584.8896 -7862.75 8614.8896 -7842.75 8609.8896 C
F-7882.75 8589.8896 m
-7866.3721 8585.7949 -7856.6992 8605.167 -7842.75 8609.5742 C
F-7872.75 8589.8896 m
-7860.54 8586.8369 -7852.0566 8596.8291 -7842.75 8603.9385 C
F-7852.75 8589.8896 m
-7849.1279 8588.9844 -7845.835 8589.2305 -7842.75 8590.2051 C
F-7882.75 8609.8896 m
-7886.3721 8610.7949 -7889.665 8610.5488 -7892.75 8609.5742 C
F-7852.7817 8590.0146 m
-7858.9009 8588.5059 -7862.7817 8590.0146 V
-7866.877 8588.5381 -7872.7817 8590.0146 V
-7877.7446 8588.3389 -7882.7817 8590.0146 V
-7888.7969 8588.4639 -7892.7817 8590.0146 V
-7892.7817 8609.6992 L
-7889.6958 8610.6738 -7886.2969 8610.8809 -7882.3799 8609.7979 C
-7876.2134 8611.3809 -7872.4634 8609.7979 V
-7867.4634 8611.3809 -7862.3799 8609.7139 V
-7858.0474 8611.2979 -7852.3799 8609.7979 V
-7846.8799 8611.2139 -7842.7817 8610.0146 V
-7842.7817 8590.3301 L
-7845.5254 8589.3184 -7848.6514 8588.8184 -7852.7817 8590.0146 C
f0 R
0 G
1 J 1 j 0.5 w-7872.75 8609.8896 m
-7880.54 8611.8369 -7886.813 8608.4746 -7892.75 8603.9385 C
S-7862.75 8609.8896 m
-7874.96 8612.9424 -7883.4434 8602.9502 -7892.75 8595.8408 C
S-7852.75 8609.8896 m
-7869.1279 8613.9844 -7878.8008 8594.6123 -7892.75 8590.2051 C
S-7892.75 8589.8896 m
-7872.75 8584.8896 -7862.75 8614.8896 -7842.75 8609.8896 C
S-7882.75 8589.8896 m
-7866.3721 8585.7949 -7856.6992 8605.167 -7842.75 8609.5742 C
S-7872.75 8589.8896 m
-7860.54 8586.8369 -7852.0566 8596.8291 -7842.75 8603.9385 C
S-7862.75 8589.8896 m
-7854.96 8587.9424 -7848.687 8591.3047 -7842.75 8595.8408 C
S-7852.75 8589.8896 m
-7849.1279 8588.9844 -7845.835 8589.2305 -7842.75 8590.2051 C
S-7882.75 8609.8896 m
-7886.3721 8610.7949 -7889.665 8610.5488 -7892.75 8609.5742 C
SUU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 10)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7892 8610.8896 m
-7841.8921 8610.8896 L
-7841.8921 8554.8652 L
-7892 8554.8652 L
-7892 8610.8896 L
nu0 O
0.1 1 1 0 k
-7854.9014 8576.4648 m
-7856.7178 8569.9854 -7866.8247 8573.3555 Y
-7866.791 8573.4199 L
-7876.8999 8570.0508 -7878.7144 8576.5293 V
-7884.6758 8593.8965 -7879.4922 8600.6348 V
-7872.7529 8610.2266 -7868.6055 8610.2266 V
-7865.0103 8610.1602 L
-7860.8638 8610.1602 -7854.125 8600.5713 Y
-7848.9409 8593.832 -7854.9014 8576.4648 Y
fu0 0 0 1 k
-7859.3926 8554.8652 m
-7860.1167 8556.3096 -7860.9238 8557.3652 V
-7860.4058 8556.9531 -7859.5151 8556.082 -7859.3926 8554.8652 C
f-7873.064 8557.375 m
-7873.8711 8556.3203 -7874.5942 8554.876 Y
-7874.4727 8556.0918 -7873.582 8556.9629 -7873.064 8557.375 C
fU0 0.61 0.74 0 k
-7858.5977 8579.3506 m
-7859.9038 8574.6855 -7867.1816 8577.1113 Y
-7867.1567 8577.1582 L
-7874.436 8574.7324 -7875.7417 8579.3975 V
-7880.0337 8591.9014 -7876.3018 8596.7529 V
-7871.4487 8603.6582 -7868.4634 8603.6582 V
-7865.875 8603.6123 L
-7862.8887 8603.6123 -7858.0366 8596.707 Y
-7854.3042 8591.8535 -7858.5977 8579.3506 Y
fu1 Ap
0.73 0.43 1 0.22 k
0 R
0 0 0 1 K
-7862.6226 8582.165 m
-7861.813 8582.165 -7861.1558 8581.5078 -7861.1558 8580.6992 c
-7861.1558 8579.8896 -7861.813 8579.2324 -7862.6226 8579.2324 c
-7863.4321 8579.2324 -7864.0889 8579.8896 -7864.0889 8580.6992 c
-7864.0889 8581.5078 -7863.4321 8582.165 -7862.6226 8582.165 c
b-7862.3638 8593.8867 m
-7861.0806 8593.8867 -7860.0415 8593.0098 -7860.0415 8591.9316 c
-7860.0415 8590.8516 -7861.0806 8589.9766 -7862.3638 8589.9766 c
-7863.645 8589.9766 -7864.6846 8590.8516 -7864.6846 8591.9316 c
-7864.6846 8593.0098 -7863.645 8593.8867 -7862.3638 8593.8867 c
b-7861.834 8605.6758 m
-7860.2817 8605.6758 -7859.0239 8605.0195 -7859.0239 8604.2109 c
-7859.0239 8603.4014 -7860.2817 8602.7441 -7861.834 8602.7441 c
-7863.3862 8602.7441 -7864.645 8603.4014 -7864.645 8604.2109 c
-7864.645 8605.0195 -7863.3862 8605.6758 -7861.834 8605.6758 c
b-7857.6104 8577.416 m
-7856.8687 8577.416 -7856.2671 8576.7051 -7856.2671 8575.8262 c
-7856.2671 8574.9492 -7856.8687 8574.2373 -7857.6104 8574.2373 c
-7858.353 8574.2373 -7858.9546 8574.9492 -7858.9546 8575.8262 c
-7858.9546 8576.7051 -7858.353 8577.416 -7857.6104 8577.416 c
b-7856.0034 8598.9727 m
-7856.8818 8598.625 -7857.1494 8597.2246 -7856.603 8595.8438 c
-7856.0566 8594.4648 -7854.9014 8593.626 -7854.0234 8593.9746 c
-7853.145 8594.3223 -7852.877 8595.7227 -7853.4233 8597.1035 c
-7853.9702 8598.4844 -7855.125 8599.3213 -7856.0034 8598.9727 c
bu-7871.0566 8582.0488 m
-7871.8662 8582.0488 -7872.5239 8581.3916 -7872.5239 8580.583 c
-7872.5239 8579.7725 -7871.8662 8579.1162 -7871.0566 8579.1162 c
-7870.248 8579.1162 -7869.5913 8579.7725 -7869.5913 8580.583 c
-7869.5913 8581.3916 -7870.248 8582.0488 -7871.0566 8582.0488 c
b-7871.3159 8593.7695 m
-7872.5991 8593.7695 -7873.6382 8592.8945 -7873.6382 8591.8145 c
-7873.6382 8590.7344 -7872.5991 8589.8594 -7871.3159 8589.8594 c
-7870.0342 8589.8594 -7868.9951 8590.7344 -7868.9951 8591.8145 c
-7868.9951 8592.8945 -7870.0342 8593.7695 -7871.3159 8593.7695 c
b-7871.8457 8605.5605 m
-7873.3975 8605.5605 -7874.6558 8604.9043 -7874.6558 8604.0938 c
-7874.6558 8603.2832 -7873.3975 8602.6279 -7871.8457 8602.6279 c
-7870.293 8602.6279 -7869.0352 8603.2832 -7869.0352 8604.0938 c
-7869.0352 8604.9043 -7870.293 8605.5605 -7871.8457 8605.5605 c
b-7876.0679 8577.2988 m
-7876.811 8577.2988 -7877.4121 8576.5879 -7877.4121 8575.7109 c
-7877.4121 8574.834 -7876.811 8574.123 -7876.0679 8574.123 c
-7875.3262 8574.123 -7874.7241 8574.834 -7874.7241 8575.7109 c
-7874.7241 8576.5879 -7875.3262 8577.2988 -7876.0679 8577.2988 c
b-7877.6758 8598.8574 m
-7876.7983 8598.5098 -7876.5298 8597.1084 -7877.0762 8595.7275 c
-7877.6226 8594.3467 -7878.7778 8593.5098 -7879.6558 8593.8574 c
-7880.5342 8594.2061 -7880.8032 8595.6074 -7880.2568 8596.9863 c
-7879.7104 8598.3672 -7878.5552 8599.2051 -7877.6758 8598.8574 c
bUU0 Ap
0 0 0 1 k
-7867.1318 8577.5449 m
-7867.1318 8610.2041 l
Fu-7851.3906 8563.4199 m
-7852.0815 8562.7266 -7855.019 8563.5918 Y
-7856.229 8563.7637 -7856.0562 8566.1836 Y
-7855.019 8568.2578 -7855.7104 8568.084 Y
-7856.2998 8568.084 -7857.855 8568.0039 -7858.7822 8567.9531 C
-7859.1226 8566.5586 -7860.6128 8565.3652 -7862.7217 8564.6592 C
-7860.7578 8561.3672 -7862.5176 8560.6846 -7864.2935 8560.6797 C
-7864.3096 8560.5918 -7864.332 8560.5059 -7864.3599 8560.4229 C
-7862.1089 8560.4688 -7861.6392 8558.1484 Y
-7861.4048 8557.9531 -7861.1606 8557.6758 -7860.9238 8557.3652 C
-7861.1416 8557.5371 -7861.2944 8557.6289 Y
-7862.2583 8557.6289 -7863.8774 8559.3838 -7864.4966 8560.0967 C
-7864.9194 8559.333 -7865.853 8558.8008 -7866.9434 8558.8008 c
-7868.0698 8558.8008 -7869.0322 8559.3691 -7869.4312 8560.1748 C
-7869.9985 8559.5137 -7871.6968 8557.6406 -7872.6943 8557.6406 C
-7872.8462 8557.5469 -7873.064 8557.375 V
-7872.8281 8557.6836 -7872.583 8557.9629 -7872.3481 8558.1582 C
-7871.8638 8560.5459 -7869.5254 8560.4238 V
-7869.5449 8560.4785 -7869.5674 8560.5332 -7869.5806 8560.5918 C
-7872.9238 8560.582 -7871.937 8563.207 -7871.2104 8564.5498 C
-7873.5918 8565.2656 -7875.2646 8566.5908 -7875.5239 8568.1396 C
-7876.4473 8568.1895 -7877.6729 8568.248 -7878.1802 8568.248 C
-7878.8726 8568.4209 -7877.835 8566.3477 V
-7877.6626 8563.9287 -7878.8726 8563.7559 V
-7881.8096 8562.8916 -7882.501 8563.583 V
-7883.1919 8564.4463 -7884.0562 8563.2363 V
-7883.1919 8564.9648 -7881.291 8564.4463 V
-7878.6982 8563.7559 -7879.3906 8565.4834 V
-7879.9087 8568.9395 -7878.1802 8569.6299 V
-7876.0342 8570.7441 -7874.2822 8570.9785 V
-7873.9087 8571.3037 -7873.4639 8571.6006 -7872.958 8571.8662 C
-7875.5562 8571.9365 -7878.2246 8572.8105 -7879.0752 8575.8457 C
-7879.5151 8577.1328 -7880.0518 8579.1328 V
-7881.1025 8579.7148 -7882.3022 8580.8975 -7883.541 8583.1523 C
-7884.394 8586.3398 -7885.167 8581.6025 V
-7886.3975 8578.5391 -7887.6504 8578.4277 V
-7886.4702 8580.1768 -7886.9038 8581.3057 V
-7885.2998 8585.8066 -7883.6138 8584.7891 V
-7882.0986 8584.1094 -7880.688 8581.7051 V
-7881.0698 8583.3867 -7881.4326 8585.3066 -7881.6743 8587.2803 C
-7882.4888 8587.2871 L
-7884.3506 8586.3691 -7884.3262 8589.8486 V
-7885.1226 8593.835 -7884.3594 8596.5723 V
-7883.647 8599.04 -7886.1274 8597.8203 V
-7887.2842 8598.2139 -7887.9839 8597.6777 V
-7890.3882 8596.3027 -7892 8598.0137 V
-7890.147 8597.7695 -7889.4482 8598.3066 V
-7887.9785 8598.4512 -7887.897 8599.0684 V
-7884.9561 8599.7451 -7884.188 8598.9668 V
-7882.417 8598.1035 -7883.1304 8595.25 V
-7883.8799 8587.3711 -7882.3198 8589.2949 V
-7882.1182 8589.3115 -7881.8784 8589.4072 V
-7882.1519 8593.3223 -7881.8018 8597.2148 -7879.9961 8599.7412 C
-7883.4536 8592.2227 -7878.2974 8577.1934 Y
-7876.9609 8572.4199 -7871.127 8572.9912 -7868.145 8573.624 C
-7868.0718 8575.0195 -7867.8374 8576.8389 -7867.1318 8577.5449 C
-7866.2134 8575.5859 -7866.2358 8573.9629 V
-7865.0762 8573.6113 -7858.2817 8571.7344 -7855.4487 8575.2266 C
-7856.4312 8572.7031 -7858.8262 8571.9082 -7861.2007 8571.8086 C
-7860.667 8571.5215 -7860.2041 8571.1943 -7859.8257 8570.8398 C
-7858.041 8570.6758 -7855.7104 8569.4668 Y
-7853.9814 8568.7754 -7854.5015 8565.3203 Y
-7855.1919 8563.5918 -7852.5991 8564.2832 Y
-7850.7002 8564.8008 -7849.835 8563.0732 Y
-7850.7002 8564.2832 -7851.3906 8563.4199 Y
f-7845.9082 8597.8418 m
-7846.6074 8598.3789 -7847.7632 8597.9834 Y
-7850.2446 8599.2031 -7849.5327 8596.7363 Y
-7848.769 8594 -7849.564 8590.0117 Y
-7849.541 8586.5342 -7851.4014 8587.4492 Y
-7852.0342 8587.4453 L
-7852.3198 8585.502 -7852.7046 8583.6445 -7853.0898 8582.0596 C
-7851.7129 8584.3096 -7850.2778 8584.9531 Y
-7848.5913 8585.9717 -7846.9878 8581.4688 Y
-7847.4214 8580.3398 -7846.2417 8578.5918 Y
-7847.4937 8578.7021 -7848.7246 8581.7656 Y
-7849.4976 8586.5049 -7850.3511 8583.3164 Y
-7851.5776 8581.0801 -7852.769 8579.8994 -7853.814 8579.3125 C
-7854.2026 8577.9531 -7854.4858 8577.1289 Y
-7854.7002 8576.3623 -7855.0337 8575.7383 -7855.4487 8575.2266 C
-7855.3799 8575.4023 -7855.3174 8575.5879 -7855.2632 8575.7813 C
-7849.3022 8593.1484 -7854.4858 8599.8867 V
-7861.2246 8609.4766 -7865.3721 8609.4766 V
-7868.9663 8609.541 L
-7873.1138 8609.541 -7879.853 8599.9512 Y
-7879.9038 8599.8857 -7879.9463 8599.8115 -7879.9961 8599.7412 C
-7879.7378 8600.3037 -7879.437 8600.8301 -7879.0752 8601.2988 C
-7872.3359 8610.8896 -7868.189 8610.8896 V
-7864.5942 8610.8242 L
-7860.4482 8610.8242 -7853.709 8601.2344 Y
-7851.5801 8598.4668 -7851.3306 8593.9072 -7851.7769 8589.4951 C
-7851.6553 8589.4648 -7851.5698 8589.458 Y
-7850.0112 8587.5371 -7850.7598 8595.4141 Y
-7851.4746 8598.2686 -7849.7026 8599.1299 Y
-7848.9351 8599.9082 -7845.9946 8599.2324 Y
-7845.9136 8598.6152 -7844.4434 8598.4707 Y
-7843.7446 8597.9346 -7841.8921 8598.1777 Y
-7843.5024 8596.4668 -7845.9082 8597.8418 Y
fUUU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 2)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7892 8610.8896 m
-7827.187 8610.8896 L
-7827.187 8546.792 L
-7892 8546.792 L
-7892 8610.8896 L
nu0 O
0 g
-7857.6978 8569.3193 m
-7859.6094 8546.792 L
-7861.5215 8569.3193 L
-7860.9033 8569.1963 -7860.2642 8569.1299 -7859.6094 8569.1299 c
-7858.9551 8569.1299 -7858.3159 8569.1963 -7857.6978 8569.3193 C
f-7869.2402 8577.2871 m
-7892 8579.2197 L
-7869.1138 8581.1631 L
-7869.2856 8580.4365 -7869.3848 8579.6826 -7869.3848 8578.9053 c
-7869.3848 8578.3525 -7869.3281 8577.8145 -7869.2402 8577.2871 C
f-7864.519 8570.4619 m
-7878.1626 8561.6943 L
-7868.2153 8574.2666 L
-7867.3574 8572.6807 -7866.0718 8571.3662 -7864.519 8570.4619 C
f-7861.481 8588.4971 m
-7859.5786 8610.8896 L
-7857.6768 8588.4863 L
-7858.3018 8588.6123 -7858.9473 8588.6807 -7859.6094 8588.6807 c
-7860.25 8588.6807 -7860.873 8588.6143 -7861.481 8588.4971 C
f-7849.9609 8580.3965 m
-7827.187 8578.4629 L
-7850.083 8576.5186 L
-7850.083 8576.7402 L
-7849.9258 8577.4385 -7849.834 8578.1592 -7849.834 8578.9053 c
-7849.834 8579.4131 -7849.8848 8579.9092 -7849.9609 8580.3965 C
f-7868.1138 8583.7158 m
-7878.1641 8596.4189 L
-7864.2778 8587.4951 L
-7865.8823 8586.6201 -7867.2114 8585.3057 -7868.1138 8583.7158 C
f-7850.9961 8574.2842 m
-7840.875 8561.4951 L
-7854.7666 8570.4209 L
-7853.1768 8571.3311 -7851.8633 8572.6689 -7850.9961 8574.2842 C
f-7854.6895 8587.3408 m
-7840.873 8596.2178 L
-7850.9658 8583.4629 L
-7851.8198 8585.0791 -7853.1152 8586.4209 -7854.6895 8587.3408 C
f-7850.8887 8583.5029 m
-7850.3862 8582.5537 -7850.043 8581.5107 -7849.875 8580.4092 c
-7849.7993 8579.9189 -7849.748 8579.417 -7849.748 8578.9053 c
-7849.748 8578.1533 -7849.8398 8577.4248 -7849.998 8576.7207 c
-7850.1958 8575.8467 -7850.5049 8575.0137 -7850.918 8574.2441 c
-7851.7954 8572.6143 -7853.1191 8571.2637 -7854.7241 8570.3457 c
-7855.6294 8569.8271 -7856.6226 8569.4434 -7857.6802 8569.2354 c
-7858.3047 8569.1104 -7858.9497 8569.042 -7859.6094 8569.042 c
-7860.2695 8569.042 -7860.915 8569.1104 -7861.5391 8569.2354 c
-7862.623 8569.4502 -7863.6382 8569.8467 -7864.5625 8570.3857 c
-7866.1313 8571.2998 -7867.4282 8572.626 -7868.291 8574.2246 c
-7868.7969 8575.1592 -7869.145 8576.1865 -7869.3262 8577.2725 c
-7869.415 8577.8057 -7869.4727 8578.3486 -7869.4727 8578.9053 c
-7869.4727 8579.6904 -7869.3711 8580.4502 -7869.1978 8581.1826 c
-7868.981 8582.0967 -7868.6406 8582.9629 -7868.187 8583.7598 c
-7867.2793 8585.3623 -7865.939 8586.6904 -7864.3174 8587.5723 c
-7863.4487 8588.0449 -7862.5 8588.3877 -7861.4961 8588.583 c
-7860.8848 8588.7012 -7860.2554 8588.7676 -7859.6094 8588.7676 c
-7858.9414 8588.7676 -7858.29 8588.6982 -7857.6602 8588.5723 c
-7856.5786 8588.3564 -7855.5664 8587.9551 -7854.6455 8587.417 c
-7853.0566 8586.4873 -7851.751 8585.1338 -7850.8887 8583.5029 c
fUU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 3)
0 A
u1 Ap
0 J 0 j 1 w 4 M []0 d0 XR
-7882.75 8611.8896 m
-7882.75 8587.8896 L
-7892.75 8587.8896 L
-7892.75 8611.8896 L
-7882.75 8611.8896 L
nuu0 Ap
0 O
1 g
-7883.4058 8603.4258 m
-7882.9878 8602.3252 -7882.75 8601.1367 -7882.75 8599.8896 c
-7882.75 8598.0273 -7883.2681 8596.29 -7884.1543 8594.7969 c
-7885.897 8591.8633 -7889.0898 8589.8896 -7892.75 8589.8896 C
-7892.75 8609.8896 L
-7892.4297 8609.8896 -7892.1143 8609.8711 -7891.8018 8609.8418 c
-7889.9121 8609.665 -7888.1807 8608.9541 -7886.7441 8607.8721 c
-7885.2471 8606.7441 -7884.0801 8605.208 -7883.4058 8603.4258 c
f0 R
0 G
1 J 1 j 0.5 w-7892.75 8590.207 m
-7889.7207 8591.1641 -7886.8926 8592.8223 -7884.1543 8594.7969 C
S-7892.75 8595.8408 m
-7889.5991 8598.2461 -7886.543 8600.9766 -7883.4058 8603.4258 C
S-7886.7441 8607.8721 m
-7888.8105 8606.7813 -7890.7993 8605.4238 -7892.75 8603.9326 C
S-7891.8018 8609.8418 m
-7892.1191 8609.7578 -7892.4375 8609.6748 -7892.75 8609.5762 C
S-7886.7441 8607.8721 m
-7888.1807 8608.9541 -7889.9121 8609.6641 -7891.8018 8609.8418 C
S-7883.4058 8603.4258 m
-7882.9878 8602.3252 -7882.75 8601.1367 -7882.75 8599.8896 c
-7882.75 8598.0273 -7883.2681 8596.29 -7884.1543 8594.7969 C
S-7892.75 8609.8896 m
-7892.4297 8609.8896 -7892.1143 8609.8711 -7891.8018 8609.8418 C
S-7886.7441 8607.8721 m
-7885.2471 8606.7441 -7884.0801 8605.208 -7883.4058 8603.4258 C
S-7884.1543 8594.7969 m
-7885.8975 8591.8633 -7889.0898 8589.8896 -7892.75 8589.8896 C
SUUU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 34)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7892.0254 8610.916 m
-7836.0542 8610.916 L
-7836.0542 8549.4238 L
-7892.0254 8549.4238 L
-7892.0254 8610.916 L
nuu0 O
0.0745 0.9 0.9019 0.18 k
0 R
0 0 0 1 K
1 J 1 j 0.0518 w-7865.5991 8587.6113 m
-7865.3594 8598.4111 -7870.8794 8608.7295 v
-7870.4009 8610.8896 -7868.959 8610.8896 v
-7869.2002 8607.5303 -7868.2393 8607.0508 v
-7863.9199 8595.0498 -7864.6382 8587.1299 v
-7865.5991 8587.6113 l
b-7865.5991 8587.6113 m
-7867.2793 8592.8896 -7879.0391 8594.0908 v
-7883.3594 8594.5703 -7883.5991 8596.0107 v
-7877.1206 8586.4092 -7876.1602 8586.6504 v
-7889.3594 8580.8906 -7892 8575.6094 v
-7886.959 8578.4902 -7883.5991 8576.3301 v
-7875.6802 8576.0908 -7870.6406 8578.251 v
-7866.8008 8580.1709 -7874.7202 8564.0908 v
-7870.8794 8575.8506 -7867.2793 8549.4502 v
-7866.3198 8554.7305 -7864.8799 8556.1709 v
-7858.8799 8563.8506 -7859.8398 8566.0107 v
-7860.3198 8569.8506 -7855.7598 8563.6104 v
-7856 8573.2109 -7858.4009 8576.5703 v
-7860.5591 8580.1709 -7854.5591 8578.0107 v
-7848.5591 8576.0908 -7843.2793 8577.7705 v
-7837.7598 8579.21 -7836.0801 8576.3301 v
-7847.8398 8588.8105 -7853.5991 8588.5703 v
-7851.9194 8592.1709 l
-7849.519 8596.9707 -7850 8598.1709 v
-7865.2681 8588.7725 -7865.5991 8587.6113 v
b-7865.5991 8587.6113 m
-7862.959 8569.1299 -7865.5991 8561.4502 v
-7867.998 8550.8906 -7867.2793 8549.4502 v
S-7864.1602 8576.3301 m
-7858.1602 8571.5303 -7856.959 8566.25 v
S-7864.1602 8575.6094 m
-7873.0391 8567.9307 -7874.7202 8564.0908 v
S-7836.0801 8576.3301 m
-7837.2793 8578.4902 -7865.3594 8586.6504 y
-7870.4009 8581.1318 -7881.9199 8578.7305 v
-7889.5986 8577.7705 -7892 8575.6094 v
S-7882.6382 8594.5703 m
-7871.1191 8585.4512 -7865.3594 8586.6504 y
-7851.1992 8592.8896 -7850 8598.1709 v
SUUU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 36)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7891.8496 8610.8857 m
-7841.96 8610.8857 L
-7841.96 8559.8154 L
-7891.8496 8559.8154 L
-7891.8496 8610.8857 L
nu0 O
0.025 0.1 0.475 0 k
-7870.1504 8578.7939 m
-7872.4766 8577.7021 -7874.6914 8577.333 -7876.373 8577.8135 c
-7877.0518 8578.0068 -7877.645 8578.3369 -7878.123 8578.8135 c
-7878.6006 8579.292 -7878.9297 8579.8848 -7879.123 8580.5625 c
-7880.0088 8583.6611 -7878.0103 8588.5674 -7873.9233 8592.6563 c
-7869.834 8596.7432 -7864.9297 8598.7412 -7861.8286 8597.8564 c
-7861.1519 8597.6611 -7860.5586 8597.332 -7860.0806 8596.8555 c
-7859.603 8596.3779 -7859.2754 8595.7852 -7859.082 8595.1064 c
-7858.5176 8593.1357 -7859.1226 8590.4346 -7860.6855 8587.6787 c
-7861.582 8586.0996 -7862.791 8584.5029 -7864.2793 8583.0127 c
-7866.1504 8581.1436 -7868.1914 8579.7139 -7870.1504 8578.7939 c
fu0.0035 0.014 0.0665 0 k
-7869.2183 8577.8623 m
-7871.8306 8576.9111 -7874.3975 8576.8584 -7876.373 8577.8135 C
-7874.6914 8577.333 -7872.4766 8577.7021 -7870.1504 8578.7939 c
-7869.6191 8579.0439 -7869.0806 8579.333 -7868.543 8579.6572 C
-7866.8984 8578.9434 L
-7867.667 8578.5068 -7868.4434 8578.1436 -7869.2183 8577.8623 c
f0.015 0.06 0.285 0 k
-7866.8984 8578.9434 m
-7868.543 8579.6572 L
-7867.0962 8580.5244 -7865.6426 8581.6504 -7864.2793 8583.0127 c
-7864.1538 8583.1396 -7864.0327 8583.2676 -7863.9102 8583.3955 C
-7863.2153 8581.7529 L
-7864.3706 8580.6133 -7865.6191 8579.6709 -7866.8984 8578.9434 C
fUu0.039 0.156 0.741 0 k
-7857.687 8566.2939 m
-7857.9746 8566.5811 -7869.2183 8577.8623 Y
-7868.4434 8578.1436 -7867.667 8578.5068 -7866.8984 8578.9434 C
-7853.4146 8565.46 L
-7855.061 8564.9893 -7856.6406 8565.2451 -7857.687 8566.2939 c
f0.025 0.1 0.475 0 k
-7853.4146 8565.46 m
-7866.8984 8578.9434 L
-7865.584 8579.6924 -7864.2969 8580.665 -7863.1143 8581.8467 c
-7863.084 8581.876 -7863.0586 8581.9053 -7863.0278 8581.9346 C
-7849.3408 8568.2471 L
-7849.5264 8568.0225 -7849.7202 8567.8037 -7849.9302 8567.5908 c
-7851.0103 8566.5127 -7852.2305 8565.7979 -7853.4146 8565.46 C
fUu0.0115 0.046 0.2185 0 k
-7843.9346 8575.2822 m
-7841.5337 8572.8789 -7841.335 8568.9795 -7843.1382 8565.5869 C
-7844.2954 8566.0078 L
-7842.0938 8569.3857 -7841.8398 8573.1846 -7843.9346 8575.2822 c
f0.015 0.06 0.285 0 k
-7851.5337 8560.4854 m
-7850.582 8559.8154 L
-7853.2046 8559.2412 -7855.8306 8559.8037 -7857.6206 8561.5957 c
-7856.1719 8560.1475 -7853.9082 8559.8203 -7851.5337 8560.4854 C
f0.0295 0.118 0.5605 0 k
-7851.5337 8560.4854 m
-7853.9082 8559.8203 -7856.1719 8560.1475 -7857.6206 8561.5957 c
-7859.019 8562.9951 -7859.3706 8565.1533 -7858.7954 8567.4365 C
-7856.8672 8564.4346 -7853.4082 8565.4434 V
-7851.585 8560.5205 L
-7851.5337 8560.4854 L
f*u
1 D
0.048 0.192 0.912 0 k
-7843.9346 8575.2822 m
-7845.2817 8576.6279 -7847.332 8577.0029 -7849.5234 8576.5166 C
-7859.6714 8586.6631 L
-7859.7695 8586.458 -7859.7695 8586.458 -7859.6714 8586.6631 c
-7858.2246 8589.7041 -7857.9702 8592.8057 -7859.082 8595.1064 C
-7858.5176 8593.1357 -7859.1226 8590.4346 -7860.6855 8587.6787 c
-7861.5054 8586.2334 -7862.5918 8584.7744 -7863.9102 8583.3955 C
-7863.2153 8581.7529 L
-7863.1816 8581.7842 -7863.1465 8581.8135 -7863.1143 8581.8467 c
-7863.084 8581.8779 -7863.0566 8581.9072 -7863.0273 8581.9365 c
-7863.0278 8581.9365 -7863.0278 8581.9365 -7863.0278 8581.9346 C
-7849.3408 8568.2471 L
-7844.3262 8566.0186 L
-7844.2954 8566.0078 L
-7842.0938 8569.3857 -7841.8398 8573.1846 -7843.9346 8575.2822 c
f*U
0 D
0.0215 0.086 0.4085 0 k
-7850.582 8559.8154 m
-7851.5337 8560.4854 L
-7849.6846 8561.001 -7847.7656 8562.1182 -7846.1138 8563.7725 c
-7845.4063 8564.4785 -7844.7998 8565.2314 -7844.2954 8566.0078 C
-7843.1382 8565.5869 L
-7843.6553 8564.6143 -7844.3374 8563.6826 -7845.1802 8562.8408 c
-7846.7695 8561.249 -7848.6758 8560.2324 -7850.582 8559.8154 C
f0.0205 0.082 0.3895 0 k
-7844.2954 8566.0078 m
-7844.7998 8565.2314 -7845.4063 8564.4785 -7846.1138 8563.7725 c
-7847.7656 8562.1182 -7849.6846 8561.001 -7851.5337 8560.4854 C
-7851.585 8560.5205 L
-7853.4082 8565.4434 L
-7852.2114 8565.8115 -7850.9878 8566.5332 -7849.9302 8567.5908 c
-7849.7202 8567.8037 -7849.5264 8568.0225 -7849.3408 8568.2471 C
-7844.3262 8566.0186 L
-7844.2954 8566.0078 L
fUu0.445 0.356 0.267 0 k
-7891.8496 8610.8857 m
-7869.957 8587.8584 L
-7870.2007 8587.5391 -7870.5752 8587.5029 -7870.8887 8587.5488 C
-7875.1802 8592.1787 -7886.3145 8604.3457 -7890.7266 8609.1689 C
-7891.5649 8610.2412 -7892 8610.8828 -7891.8496 8610.8857 C
f0.15 0.12 0.09 0 k
-7891.834 8610.8857 m
-7890.6606 8610.5928 -7869.6934 8588.8926 Y
-7869.6934 8588.3916 -7869.7993 8588.0654 -7869.957 8587.8584 C
-7891.8496 8610.8857 L
-7891.8442 8610.8857 -7891.8418 8610.8896 -7891.834 8610.8857 c
f0.2 0.16 0.12 0 k
-7890.7266 8609.1689 m
-7886.3145 8604.3457 -7875.1802 8592.1787 -7870.8887 8587.5488 C
-7871.2002 8587.5938 -7871.4526 8587.7197 Y
-7872.603 8588.0225 -7886.5742 8603.8516 -7890.7266 8609.1689 C
fUUU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 37)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7890.9502 8610.1221 m
-7841.0391 8610.1221 L
-7841.0391 8546.0049 L
-7890.9502 8546.0049 L
-7890.9502 8610.1221 L
nu0 O
0 0 0 1 k
0 R
0 0 0 1 K
0 w-7841.2358 8546.0049 m
-7841.6064 8546.1377 -7841.9858 8546.1729 -7842.3833 8546.0928 c
-7842.4863 8546.0576 l
-7842.5254 8546.0498 -7842.5703 8546.0684 -7842.6025 8546.0889 c
-7842.9434 8546.2822 l
-7846.7129 8548.1855 -7850.0962 8550.7861 -7852.5 8554.3369 c
-7853.9634 8556.4814 -7855.123 8558.7686 -7856.7993 8560.7461 c
-7857.1729 8561.0986 -7857.1758 8561.6621 -7856.834 8562.0205 c
-7856.4951 8562.3906 -7855.918 8562.3975 -7855.561 8562.0547 c
-7855.4038 8562.0996 l
-7855.2642 8562.0186 -7855.0742 8561.96 -7855.0234 8561.8467 c
-7853.853 8559.0928 -7853.1895 8556.4033 -7851.4336 8554.0283 c
-7849.1719 8550.9844 -7846.1777 8548.8838 -7843.0298 8546.9131 c
-7842.3672 8546.4951 L
-7842.4966 8546.5244 L
-7841.7695 8546.5322 l
-7841.791 8546.501 -7841.8008 8546.4854 -7841.8223 8546.4541 C
-7841.6064 8546.4131 -7841.377 8546.3643 -7841.1626 8546.3232 c
-7841.0762 8546.3135 -7841.0186 8546.2285 -7841.0391 8546.1279 c
-7841.0503 8546.042 -7841.1382 8545.998 -7841.2358 8546.0049 c
-7841.2358 8546.0049 l
b-7857.2222 8559.8848 m
-7857.5742 8559.6963 -7857.9658 8559.5615 -7858.248 8559.2783 c
-7864.4521 8553.0615 -7874.6802 8552.1631 -7882.0488 8558.5752 C
-7882.1582 8558.6709 -7882.1582 8558.8467 -7882.063 8558.9541 C
-7879.0527 8557.833 -7870.8838 8559.2646 -7867.3223 8562.3018 C
-7867.2534 8562.3564 -7867.1465 8562.3428 -7867.1055 8562.2607 C
-7867.0503 8562.1943 -7867.0664 8562.085 -7867.1328 8562.0459 C
-7870.5625 8558.9756 -7875.0674 8557.1797 -7879.6729 8557.6377 C
-7876.8535 8556.0752 -7873.6313 8555.3838 -7870.3984 8555.5781 c
-7865.7144 8555.8613 -7861.4634 8558.0088 -7857.3711 8560.1689 c
-7857.291 8560.209 -7857.1978 8560.1826 -7857.1553 8560.1006 C
-7857.1016 8560.0205 -7857.1426 8559.9248 -7857.2222 8559.8848 c
b-7866.647 8561.2256 m
-7868.2266 8565.251 -7870.3911 8569.21 -7873.8018 8571.9658 c
-7873.9648 8572.1016 -7873.9946 8572.3389 -7873.8711 8572.4951 c
-7873.7344 8572.6572 -7873.5049 8572.6689 -7873.3481 8572.5459 c
-7869.123 8570.4863 -7866.1904 8566.0205 -7866.1626 8561.291 c
-7866.1626 8561.291 l
-7866.1328 8561.1572 -7866.2354 8561.0244 -7866.3633 8561.0117 c
-7866.5039 8560.9951 -7866.6318 8561.0869 -7866.647 8561.2256 c
-7866.647 8561.2256 l
b-7860.9414 8565.9072 m
-7861.042 8566.0713 -7861.1152 8566.2734 -7861.2617 8566.3721 c
-7864.0806 8568.2803 -7866.9785 8569.5205 -7869.8848 8571.0225 c
-7870.0503 8571.0986 -7870.1118 8571.3076 -7870.0313 8571.46 c
-7869.9512 8571.6123 -7869.7559 8571.6689 -7869.5898 8571.5938 c
-7866.439 8570.2129 -7862.313 8569.3896 -7860.6729 8566.0693 c
-7860.6289 8566.001 -7860.6455 8565.9043 -7860.7266 8565.8545 c
-7860.7959 8565.8096 -7860.897 8565.8389 -7860.9414 8565.9072 c
-7860.9414 8565.9072 l
b-7860.6602 8566.8076 m
-7860.4438 8567.3193 -7860.1431 8567.7793 -7860.0503 8568.3252 c
-7859.2183 8573.167 -7859.1152 8577.9316 -7860.248 8582.5771 c
-7860.248 8582.5771 l
-7860.3418 8582.8428 -7860.2114 8583.1338 -7859.9438 8583.2285 c
-7859.6777 8583.3232 -7859.3882 8583.2021 -7859.2935 8582.9375 c
-7857.293 8577.7012 -7857.897 8571.627 -7860.3711 8566.6729 c
-7860.4063 8566.5898 -7860.498 8566.5586 -7860.582 8566.5811 c
-7860.6641 8566.6172 -7860.6978 8566.7246 -7860.6602 8566.8076 c
-7860.6602 8566.8076 l
b-7859.5352 8582.4834 m
-7856.8984 8580.1172 -7854.6816 8577.1416 -7853.853 8573.626 c
-7853.853 8573.626 l
-7853.7246 8573.0713 -7854.0742 8572.5127 -7854.6416 8572.3799 c
-7855.1992 8572.2646 -7855.7578 8572.6143 -7855.8862 8573.1689 c
-7856.5649 8576.4209 -7857.8711 8579.5625 -7859.7954 8582.2764 c
-7859.7954 8582.2764 l
-7859.8462 8582.3447 -7859.834 8582.4473 -7859.7695 8582.5098 c
-7859.6992 8582.5596 -7859.5977 8582.5479 -7859.5352 8582.4834 c
-7859.5352 8582.4834 l
b-7844.3711 8575.0723 m
-7845.7114 8570.7197 -7848.2598 8566.959 -7851.689 8564.043 C
-7851.729 8563.9619 -7851.8242 8563.9219 -7851.9038 8563.9756 C
-7851.9863 8564.0166 -7852.0122 8564.1104 -7851.9722 8564.1914 C
-7851.957 8564.6787 -7851.7144 8565.123 -7851.4458 8565.4209 c
-7846.4063 8571.0518 -7842.9902 8579.6094 -7845.3433 8586.8447 C
-7845.0762 8581.3408 -7846.7241 8575.1904 -7850.1362 8570.5635 c
-7851.1606 8569.1592 -7852.7422 8569.0107 -7854.3081 8569.0928 C
-7854.4023 8569.0791 -7854.4834 8569.1328 -7854.4961 8569.2266 c
-7854.5098 8569.3086 -7854.4551 8569.4033 -7854.3623 8569.415 C
-7851.1479 8570.6592 -7849.4878 8574.1143 -7848.084 8577.084 c
-7846.415 8580.6338 -7845.7017 8584.5283 -7846.0054 8588.3896 C
-7846.0454 8588.5674 -7846.1138 8590.2871 -7845.9775 8590.2998 C
-7845.8306 8590.3291 -7845.709 8590.2334 -7845.6802 8590.084 C
-7845.645 8589.9346 -7842.6426 8580.6885 -7844.3711 8575.0723 c
b-7852.4863 8562.3809 m
-7851.3945 8558.5107 -7849.1094 8555.1406 -7846.4824 8552.1279 c
-7846.3306 8551.9941 -7846.3145 8551.7764 -7846.4502 8551.625 c
-7846.5752 8551.4902 -7846.8047 8551.4717 -7846.957 8551.6074 c
-7850.3306 8554.2217 -7851.4487 8558.4307 -7852.7954 8562.2646 c
-7852.7954 8562.2646 l
-7852.8262 8562.3545 -7852.7754 8562.4482 -7852.6982 8562.4766 c
-7852.6094 8562.5088 -7852.5166 8562.458 -7852.4863 8562.3809 c
-7852.4863 8562.3809 l
b-7846.5313 8586.999 m
-7846.5991 8586.9463 -7846.707 8586.9727 -7846.748 8587.04 C
-7846.9634 8587.3643 -7848.6914 8589.4092 -7849.3926 8590.0303 c
-7854.1719 8594.2842 -7857.5137 8598.8506 -7865.5391 8602.6123 c
-7872.4512 8605.8535 -7875.1113 8608.4854 -7882.3862 8606.7158 c
-7885.687 8605.9189 -7887.0313 8605.4209 -7888.4351 8600.3447 C
-7889.9473 8594.1885 -7888.8672 8596.6729 -7889.084 8589.3281 c
-7889.2222 8584.5869 -7892 8573.3447 -7879.5254 8559.1494 C
-7879.4199 8559.0381 -7879.4336 8558.8857 -7879.5337 8558.7969 C
-7879.6328 8558.6924 -7879.7959 8558.7061 -7879.8862 8558.8057 C
-7885.5786 8563.6064 -7889.0234 8570.5479 -7890.3145 8577.832 c
-7891.2871 8583.3564 -7890.9199 8588.1396 -7890.666 8594.5264 c
-7890.5688 8596.9834 -7891.6855 8603.9619 -7886.9102 8607.9521 c
-7883.3926 8610.8896 -7878.3911 8610.4365 -7874.3545 8609.0459 c
-7868.6992 8607.1016 -7863.9727 8604.0361 -7858.8711 8600.499 c
-7855.2656 8598.0146 -7847.2881 8588.1748 -7846.4785 8587.2158 C
-7846.4351 8587.1484 -7846.4502 8587.04 -7846.5313 8586.999 C
b-7881.0503 8574.1953 m
-7880.168 8573.3926 -7879.7017 8574.7354 -7879.4297 8575.4912 c
-7879.1626 8576.2471 -7878.189 8576.1396 -7878.5127 8576.4629 c
-7878.8369 8576.7871 -7878.8369 8576.8418 -7879.3232 8576.4092 c
-7879.8086 8575.9775 -7879.8086 8576.626 -7880.5649 8576.1396 c
-7881.3198 8575.6523 -7881.645 8574.7354 -7881.0503 8574.1953 c
b-7873.6519 8578.8389 m
-7873.3657 8578.4814 -7872.6802 8578.4619 -7872.4648 8578.7842 c
-7872.25 8579.1094 -7871.3306 8579.1631 -7871.4937 8579.4863 c
-7871.6543 8579.8115 -7871.6016 8580.0283 -7872.0874 8579.8115 c
-7872.5737 8579.5947 -7872.4121 8580.1895 -7872.897 8579.9736 c
-7873.3833 8579.7568 -7873.8687 8579.1094 -7873.6519 8578.8389 c
b-7865.6074 8583.9688 m
-7865.1206 8583.6455 -7863.8794 8584.4014 -7864.4727 8584.4014 c
-7865.0674 8584.4014 -7864.311 8585.1572 -7864.8521 8585.373 c
-7865.3906 8585.5889 -7865.2832 8585.3193 -7865.6074 8585.5342 c
-7865.9297 8585.751 -7866.3633 8586.1289 -7866.5239 8585.3193 c
-7866.6855 8584.5088 -7866.3633 8584.5088 -7865.9849 8584.2393 c
-7865.6074 8583.9688 -7865.6074 8583.9688 y
b-7880.2402 8584.2393 m
-7879.1074 8584.1318 -7879.8633 8584.8877 -7879.269 8585.373 c
-7878.6738 8585.8594 -7877.918 8586.5068 -7878.729 8586.29 c
-7879.5391 8586.0752 -7880.9961 8586.5615 -7880.9434 8585.4277 c
-7880.8887 8584.293 -7880.6328 8584.2764 -7880.2402 8584.2393 c
b-7874.5703 8592.501 m
-7874.1016 8592.2334 -7874.6802 8592.6094 -7874.0303 8592.501 c
-7873.3833 8592.3936 -7872.7886 8592.501 -7873.2207 8592.7178 c
-7873.6519 8592.9336 -7874.3008 8593.042 -7874.4634 8592.8789 c
-7874.625 8592.7178 -7874.9473 8592.7178 -7874.5703 8592.501 c
b-7865.0674 8592.0693 m
-7865.4785 8591.0693 -7864.0962 8591.3135 -7863.4473 8591.6357 c
-7862.7998 8591.9619 -7861.8262 8591.3672 -7862.4209 8591.7998 c
-7863.0137 8592.2314 -7862.7998 8591.7998 -7863.3926 8592.123 c
-7863.9873 8592.4463 -7864.6895 8592.9873 -7865.0674 8592.0693 c
b-7880.6738 8597.9561 m
-7880.7222 8596.9648 -7879.8086 8597.8467 -7879.269 8597.9014 c
-7878.729 8597.9561 -7878.0801 8597.9561 -7878.2432 8598.1709 c
-7878.4038 8598.3877 -7878.459 8598.3877 -7879.1626 8598.6025 c
-7879.8633 8598.8193 -7880.6191 8599.0342 -7880.6738 8597.9561 c
b-7881.1582 8592.501 m
-7882.0664 8592.8643 -7882.293 8592.7705 -7882.5625 8593.0947 c
-7882.834 8593.4189 -7883.1558 8594.1211 -7883.5352 8592.9873 c
-7883.9121 8591.8525 -7883.4282 8590.666 -7883.0479 8590.8271 c
-7882.6714 8590.9893 -7882.293 8591.6357 -7881.8618 8591.8525 c
-7881.4297 8592.0693 -7880.6191 8592.2842 -7881.1582 8592.501 c
bUU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 41)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7892 8610.8896 m
-7811 8610.8896 L
-7811 8505.8896 L
-7892 8505.8896 L
-7892 8610.8896 L
nuuu0 O
0 0 0 1 k
-7873.8057 8523.3154 m
-7874.0742 8521.5518 -7875.1602 8520.1807 -7876.5239 8520.2861 c
-7877.8862 8520.3916 -7878.707 8521.9131 -7878.7432 8523.6963 c
-7878.748 8523.959 -7878.6743 8525.1338 -7878.6304 8525.3672 C
-7878.6382 8525.4717 -7878.6191 8525.5635 -7878.6104 8525.6699 c
-7878.5142 8526.915 -7877.3574 8528.25 -7875.9414 8528.1396 c
-7874.5249 8528.0303 -7873.4897 8526.751 -7873.6367 8525.3623 c
-7873.644 8525.2969 -7873.6958 8524.5156 -7873.707 8524.4521 C
-7873.6816 8524.1748 -7873.7598 8523.6152 -7873.8057 8523.3154 c
f-7884.2646 8532.623 m
-7884.9946 8540.8057 -7879.5015 8540.0088 v
-7876.3682 8538.9082 -7877.4414 8536.0107 v
-7877.6426 8534.6416 -7879.7847 8533.3877 v
-7880.146 8533.1396 -7880.7632 8531.9912 v
-7881.1294 8530.4873 -7882.5186 8530.1875 v
-7884.0762 8530.1406 -7884.2646 8532.623 v
f-7858.7646 8541.3867 m
F-7858.0762 8539.2305 m
-7858.7847 8538.083 -7861.8848 8538.5176 Y
-7862.811 8538.5781 -7863.3799 8538.001 Y
-7865.8394 8533.9814 -7869.0386 8534.7754 -7869.4082 8534.8828 C
-7869.4097 8534.876 L
-7872.999 8535.4941 -7873.2666 8540.4932 V
-7873.4912 8541.2725 -7874.335 8541.6592 V
-7877.2695 8542.751 -7877.3481 8544.0977 V
-7877.8999 8546.0049 -7875.6006 8546.6318 V
-7873.6792 8547.1465 -7871.7886 8544.7842 V
-7870.6113 8543.5693 -7867.5762 8542.8291 V
-7867.5728 8542.8428 L
-7864.3594 8541.9355 -7862.6392 8542.4785 Y
-7859.8521 8543.6572 -7858.4063 8542.291 Y
-7856.6826 8540.6455 -7858.0762 8539.2305 Y
f-7871.9834 8522.7686 m
-7872.5854 8521.0898 -7872.2822 8519.3672 -7871.0327 8518.8125 c
-7869.7842 8518.2568 -7868.3384 8519.2061 -7867.4585 8520.7568 c
-7867.3286 8520.9854 -7866.8359 8522.0547 -7866.7632 8522.2803 C
-7866.7065 8522.3682 -7866.6792 8522.458 -7866.6362 8522.5566 c
-7866.1289 8523.6982 -7866.5122 8525.4199 -7867.8105 8525.9971 c
-7869.1089 8526.5752 -7870.6279 8525.9424 -7871.1582 8524.6514 c
-7871.1831 8524.5898 -7871.5078 8523.8779 -7871.5298 8523.8164 C
-7871.6831 8523.5859 -7871.8809 8523.0557 -7871.9834 8522.7686 c
f-7857.7129 8525.8213 m
-7853.1802 8532.6719 -7858.3911 8534.584 v
-7861.6714 8535.1064 -7862.103 8532.0469 v
-7862.5786 8530.7461 -7861.29 8528.625 v
-7861.0903 8528.2344 -7861.0938 8526.9297 v
-7861.4858 8525.4346 -7860.4082 8524.5078 v
-7859.0591 8523.7256 -7857.7129 8525.8213 v
fUu-7832.7358 8574.9971 m
-7832.3687 8573.252 -7832.9048 8571.5859 -7834.2183 8571.2061 c
-7835.5322 8570.8271 -7836.8345 8571.9648 -7837.4937 8573.6221 c
-7837.5903 8573.8672 -7837.9326 8574.9922 -7837.9746 8575.2266 C
-7838.0176 8575.3223 -7838.0322 8575.4141 -7838.0625 8575.5176 c
-7838.4087 8576.7168 -7837.7935 8578.3701 -7836.4282 8578.7646 c
-7835.063 8579.1592 -7833.645 8578.3262 -7833.2969 8576.9746 c
-7833.2793 8576.9102 -7833.0552 8576.1602 -7833.0425 8576.0967 C
-7832.9214 8575.8447 -7832.7983 8575.2949 -7832.7358 8574.9971 c
f-7846.2705 8579.5068 m
-7849.8242 8586.9141 -7844.3999 8588.0957 v
-7841.0801 8588.165 -7841.0688 8585.0742 v
-7840.7778 8583.7207 -7842.3433 8581.7969 v
-7842.5942 8581.4355 -7842.7695 8580.1436 v
-7842.5854 8578.6084 -7843.7793 8577.8389 v
-7845.2222 8577.249 -7846.2705 8579.5068 v
f-7825.4648 8596.6592 m
F-7824.063 8594.8809 m
-7824.3247 8593.5586 -7827.3799 8592.8779 Y
-7828.27 8592.6094 -7828.5986 8591.8691 Y
-7829.4922 8587.2432 -7832.7666 8586.8643 -7833.1494 8586.835 C
-7833.1494 8586.8291 L
-7836.7271 8586.1484 -7838.731 8590.7363 V
-7839.2153 8591.3857 -7840.1416 8591.4521 V
-7843.272 8591.4453 -7843.8169 8592.6787 V
-7845.0039 8594.2705 -7843.0713 8595.666 V
-7841.4526 8596.8213 -7838.853 8595.2715 V
-7837.3242 8594.5479 -7834.2222 8594.9189 V
-7834.2231 8594.9316 L
-7830.896 8595.2109 -7829.4766 8596.3223 Y
-7827.2793 8598.4043 -7825.4463 8597.6328 Y
-7823.2554 8596.6953 -7824.063 8594.8809 Y
f-7830.8374 8575.125 m
-7830.813 8573.3408 -7829.9258 8571.835 -7828.5601 8571.7529 c
-7827.1943 8571.6699 -7826.1743 8573.0664 -7825.895 8574.8281 c
-7825.854 8575.0869 -7825.7666 8576.2607 -7825.7778 8576.499 C
-7825.7559 8576.6006 -7825.7617 8576.6934 -7825.7559 8576.8018 c
-7825.6807 8578.0488 -7826.644 8579.5264 -7828.0625 8579.6113 c
-7829.4814 8579.6963 -7830.6826 8578.5723 -7830.7246 8577.1768 c
-7830.7271 8577.1113 -7830.7822 8576.3301 -7830.7798 8576.2646 C
-7830.8433 8575.9941 -7830.8423 8575.4297 -7830.8374 8575.125 c
f-7819.0186 8582.4521 m
-7817.1777 8590.458 -7822.7271 8590.4199 v
-7825.9834 8589.7588 -7825.3154 8586.7412 v
-7825.3032 8585.3564 -7823.353 8583.8223 v
-7823.0278 8583.5273 -7822.5742 8582.3047 v
-7822.417 8580.7656 -7821.083 8580.2773 v
-7819.5454 8580.0176 -7819.0186 8582.4521 v
fUU1 Ap
-7892 8610.8896 m
-7892 8505.8896 L
-7811 8505.8896 L
-7811 8610.8896 L
-7892 8610.8896 L
nUU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 42)
0 A
u0 Ap
0 J 0 j 1 w 4 M []0 d0 XR
-7865.4609 8583.9746 m
-7893 8583.9746 L
-7893 8611.5137 L
-7865.4609 8611.5137 L
-7865.4609 8583.9746 L
n0 O
0 0.55 1 0.12 k
-7879.7598 8602.252 m
-7879.7598 8611.8896 L
-7878.6343 8611.8896 L
-7878.6343 8602.252 L
-7879.7598 8602.252 L
f0 0.55 1 0.3 k
-7883.4233 8597.7656 m
-7882.3096 8596.0449 -7878.8809 8594.3467 -7874.4966 8594.3467 c
-7870.1152 8594.3467 -7866.6138 8595.9961 -7865.5718 8597.7637 C
-7865.5718 8597.7637 L
-7866.6138 8599.4902 -7870.1152 8601.1875 -7874.4966 8601.1875 c
-7878.875 8601.1875 -7882.3242 8599.4512 -7883.4233 8597.7656 C
fU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 45)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7893 8568.8076 m
-7893 8611.8896 L
-7806.2217 8611.8896 L
-7806.2217 8568.8076 L
-7893 8568.8076 L
nuu0 O
0 0 0 1 k
-7833.2217 8598.126 m
-7833.2217 8605.9639 L
-7821.2217 8599.0342 L
-7809.2217 8592.1064 L
-7821.2217 8585.1787 L
-7833.2217 8578.251 L
-7833.2217 8586.3721 L
-7891.9351 8572.6064 L
-7878.9878 8591.6924 L
-7893 8611.8896 L
-7833.2217 8598.126 L
f0 1 1 0.1 k
0 R
0 0 0 1 K
-7831.2217 8595.126 m
-7831.2217 8602.9639 L
-7819.2217 8596.0342 L
-7807.2217 8589.1064 L
-7819.2217 8582.1787 L
-7831.2217 8575.251 L
-7831.2217 8583.3721 L
-7889.9351 8569.6064 L
-7875.2754 8589.249 L
-7889.9351 8608.8896 L
-7831.2217 8595.126 L
bUUU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 5)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7734.3994 8611.8896 m
-7734.3994 8598.3096 L
-7893 8598.3096 L
-7893 8611.8896 L
-7734.3994 8611.8896 L
nuu0 O
0.285 0.228 0.171 0 k
-7749.0786 8610.374 m
-7749.043 8611.5791 L
-7735.5103 8612.4072 -7734.8418 8611.1719 v
-7734.7441 8610.9912 -7734.647 8610.6045 -7734.561 8610.083 C
-7736.584 8610.7139 -7746.291 8610.4609 -7749.0786 8610.374 C
f0.44 0.352 0.264 0 k
-7749.4063 8598.9131 m
-7749.3711 8600.1572 L
-7746.4912 8599.9385 -7736.1914 8599.2061 -7734.543 8599.7549 C
-7734.7031 8599.1084 -7734.9199 8598.6543 -7735.2046 8598.5049 c
-7736.8306 8597.6553 -7749.4063 8598.9131 Y
f0.145 0.116 0.087 0 k
-7749.3711 8600.1572 m
-7749.0786 8610.374 L
-7746.291 8610.4609 -7736.584 8610.7139 -7734.561 8610.083 C
-7734.1519 8607.667 -7733.9258 8602.25 -7734.543 8599.7549 C
-7736.1914 8599.2061 -7746.4912 8599.9385 -7749.3711 8600.1572 C
fUu0.155 0.124 0.093 0 k
-7774.9375 8604.1631 m
-7773.897 8604.5459 L
-7755.0728 8600.0361 L
-7755.481 8599.2041 L
-7774.3633 8601.6143 L
-7775.252 8601.8955 L
-7775.6504 8601.7832 -7776.1934 8601.7139 V
-7775.6094 8602.127 -7775.1426 8603.0303 -7774.9375 8604.1631 C
fu0.085 0.068 0.051 0 k
-7779.7993 8608.5557 m
-7780.5977 8608.6113 -7777.749 8608.5537 Y
-7778.3481 8607.9072 -7778.771 8606.71 -7778.8105 8605.3271 c
-7778.8169 8605.1143 -7778.8105 8604.9072 -7778.7993 8604.7031 C
-7779.041 8604.5967 -7779.0918 8604.6631 -7779.6289 8604.4541 C
-7779 8608.501 -7779.7993 8608.5557 v
f0.305 0.244 0.183 0 k
-7778.3442 8601.7568 m
-7778.5527 8601.7002 -7778.4937 8603.8203 Y
-7777.4785 8604.6484 L
-7775.8359 8603.833 L
-7774.9375 8604.1631 L
-7775.1426 8603.0303 -7775.6094 8602.127 -7776.1934 8601.7139 C
-7776.6094 8601.6611 -7777.874 8601.6895 -7778.3442 8601.7568 C
fU0.115 0.092 0.069 0 k
-7774.9375 8604.1631 m
-7775.8359 8603.833 L
-7777.4785 8604.6484 L
-7778.4937 8603.8203 L
-7778.793 8604.5977 -7778.7993 8604.7031 V
-7777.5137 8605.2686 -7776.1831 8605.6299 -7774.8398 8605.8154 C
-7774.79 8605.6172 -7774.7842 8605.4326 -7774.79 8605.2266 c
-7774.7998 8604.8613 -7774.8218 8604.5078 -7774.9375 8604.1631 C
f0.41 0.328 0.246 0 k
-7755.4512 8600.2861 m
-7757.377 8601.5322 -7766.3862 8606.9883 -7774.8398 8605.8154 C
-7774.9038 8606.9824 -7775.248 8607.9805 -7775.75 8608.5527 C
-7775.1895 8608.5518 L
-7754.7402 8611.6455 L
-7755.0366 8601.3154 L
-7755.0728 8600.0361 L
-7755.2046 8600.127 -7755.4512 8600.2861 v
f0.395 0.316 0.237 0 k
-7778.8105 8605.3271 m
-7778.771 8606.71 -7778.3481 8607.9072 -7777.749 8608.5537 C
-7775.6807 8608.5527 L
-7775.1782 8607.9805 -7774.8218 8606.9609 -7774.8398 8605.8154 C
-7776.1831 8605.6299 -7777.5137 8605.2686 -7778.7993 8604.7031 C
-7778.8105 8604.9072 -7778.8169 8605.1143 -7778.8105 8605.3271 c
fUu0 0 0 0.11 k
-7749.2642 8599.0908 m
-7748.2407 8598.9248 L
-7749.2642 8599.0908 L
-7749.2642 8599.0908 L
f0 0 0 0.34 k
-7755.481 8599.2041 m
-7755.0728 8600.0361 L
-7753.6714 8599.8076 L
-7752.5234 8599.6211 L
-7750.6758 8599.3203 L
-7749.2642 8599.0908 L
-7748.2407 8598.9248 L
-7748.2954 8598.6064 -7748.3672 8598.3877 -7748.4648 8598.3096 C
-7755.481 8599.2041 L
f0 0 0 0.32 k
-7753.8042 8604.0967 m
-7754.041 8611.751 L
-7748.7144 8611.8896 L
-7747.7266 8608.4043 -7748.1816 8604.0439 V
-7753.8042 8604.0967 L
fU0.025 0.02 0.015 0 k
-7747.3223 8601.2744 m
-7744.373 8601.8096 -7741.2402 8602.0498 -7738.3159 8601.251 c
-7738.2856 8601.2393 -7738.2754 8601.208 -7738.2871 8601.1865 c
-7738.2881 8601.1553 -7738.3198 8601.1455 -7738.3418 8601.1455 c
-7741.2422 8601.9541 -7744.375 8601.7139 -7747.3042 8601.168 c
-7747.3262 8601.1689 -7747.3574 8601.1807 -7747.3672 8601.2119 c
-7747.3662 8601.2334 -7747.355 8601.2646 -7747.3223 8601.2744 c
-7747.3223 8601.2744 l
f-7745.8374 8600.1973 m
-7745.7295 8600.2686 -7745.6313 8600.3838 -7745.5234 8600.3916 c
-7741.7886 8600.7217 -7738.1631 8600.6709 -7734.4746 8600.5537 c
-7734.4526 8600.5537 -7734.4209 8600.5322 -7734.4214 8600.5107 c
-7734.4214 8600.4775 -7734.4551 8600.458 -7734.4766 8600.458 c
-7737.3223 8600.5713 -7740.1401 8600.5889 -7743.0039 8600.4248 c
-7743.9336 8600.3662 -7744.9082 8600.6299 -7745.7778 8600.1104 c
-7745.7993 8600.1006 -7745.8306 8600.1006 -7745.8506 8600.123 c
-7745.8618 8600.1455 -7745.8594 8600.1768 -7745.8374 8600.1973 c
-7745.8374 8600.1973 l
f-7741.373 8602.2568 m
-7739.5098 8603.5693 -7737.3022 8604.2637 -7735.1001 8604.7764 c
-7735.0679 8604.7861 -7735.0474 8604.7744 -7735.0366 8604.7432 c
-7735.0273 8604.71 -7735.0488 8604.6904 -7735.0703 8604.6797 c
-7737.2617 8604.1553 -7739.459 8603.4932 -7741.3105 8602.1699 c
-7741.3433 8602.1494 -7741.375 8602.1611 -7741.3848 8602.1826 c
-7741.4058 8602.2041 -7741.3945 8602.2354 -7741.373 8602.2568 c
-7741.373 8602.2568 l
f-7746.9321 8608.9463 m
-7744.7295 8609.46 -7742.5298 8609.9199 -7740.2798 8610.165 c
-7740.2598 8610.1748 -7740.229 8610.1533 -7740.229 8610.1318 c
-7740.2183 8610.0986 -7740.2407 8610.0674 -7740.2729 8610.0684 c
-7742.5122 8609.7705 -7744.7305 8609.4072 -7746.9126 8608.8398 c
-7746.9351 8608.8408 -7746.9673 8608.8525 -7746.9766 8608.8838 c
-7746.9751 8608.9053 -7746.9648 8608.9375 -7746.9321 8608.9463 c
-7746.9321 8608.9463 l
f-7746.439 8608.25 m
-7744.3457 8609.0869 -7742.1016 8608.8193 -7739.9023 8608.8525 c
-7739.8706 8608.8506 -7739.8496 8608.8291 -7739.8506 8608.7979 c
-7739.8521 8608.7646 -7739.873 8608.7451 -7739.8945 8608.7451 c
-7742.0928 8608.7334 -7744.3374 8608.9893 -7746.4209 8608.1426 c
-7746.4434 8608.1436 -7746.4746 8608.1553 -7746.4834 8608.1865 c
-7746.4834 8608.208 -7746.4722 8608.2402 -7746.439 8608.25 c
-7746.439 8608.25 l
f-7745.707 8609.5947 m
-7744.3833 8609.6416 -7743.1504 8609.4365 -7741.8271 8609.0986 c
-7741.3594 8608.9893 -7740.9199 8609.1162 -7740.4609 8609.1025 c
-7739.897 8609.0869 l
-7739.874 8609.0859 -7739.8633 8609.0752 -7739.8535 8609.0635 c
-7739.834 8609.042 -7739.8442 8609.0107 -7739.8662 8608.9893 c
-7740.0625 8608.835 l
-7740.0742 8608.835 -7740.085 8608.8252 -7740.0962 8608.8252 c
-7740.5 8608.8369 l
-7741.9551 8609.0811 -7743.457 8609.5615 -7744.8926 8608.9639 c
-7744.9258 8608.9541 -7744.957 8608.9756 -7744.9673 8608.9971 c
-7744.9673 8609.0293 -7744.9551 8609.0498 -7744.9336 8609.0605 c
-7743.647 8609.5889 -7742.1714 8609.3652 -7740.8818 8608.9443 c
-7740.0918 8608.9326 L
-7740.124 8608.9229 L
-7739.9282 8609.0771 L
-7739.8984 8608.9795 L
-7740.4639 8608.9961 l
-7740.9321 8609.0303 -7741.3848 8608.873 -7741.8398 8608.9932 c
-7743.1543 8609.3506 -7744.3975 8609.5146 -7745.71 8609.4883 c
-7745.7422 8609.4893 -7745.7642 8609.5107 -7745.7617 8609.543 c
-7745.7617 8609.5752 -7745.7402 8609.5957 -7745.707 8609.5947 c
-7745.707 8609.5947 l
f-7746.5718 8609.9502 m
-7743.8711 8611.1104 -7740.9023 8610.46 -7738.1279 8610.0713 c
-7737.7832 8610.1787 l
-7737.7617 8610.1885 -7737.7417 8610.1768 -7737.7207 8610.1553 c
-7737.71 8610.1338 -7737.7217 8610.1025 -7737.7422 8610.0918 c
-7738.0801 8609.8994 l
-7740.7754 8609.2822 -7743.5391 8609.6709 -7746.271 8609.6748 c
-7746.3022 8609.6768 -7746.3232 8609.6982 -7746.3223 8609.7295 c
-7746.3198 8609.7617 -7746.2983 8609.7822 -7746.2681 8609.7822 c
-7743.6738 8609.8252 -7741.0303 8609.333 -7738.4727 8609.9639 c
-7737.7954 8610.1787 L
-7737.7534 8610.0811 L
-7738.1406 8609.9756 l
-7740.9058 8610.332 -7743.8418 8611.0244 -7746.5313 8609.8643 c
-7746.5537 8609.8545 -7746.585 8609.8545 -7746.5962 8609.8877 c
-7746.6055 8609.9092 -7746.605 8609.9404 -7746.5718 8609.9502 c
-7746.5718 8609.9502 l
f-7743.6895 8603.2842 m
-7742.3945 8603.79 -7740.9834 8603.5361 -7739.6802 8603.2334 c
-7739.647 8603.2314 -7739.6367 8603.21 -7739.6382 8603.1787 c
-7739.6504 8603.1465 -7739.6714 8603.1357 -7739.7031 8603.1377 c
-7740.998 8603.4199 -7742.377 8603.7051 -7743.6504 8603.1865 c
-7743.6826 8603.1768 -7743.7144 8603.1885 -7743.7246 8603.2207 c
-7743.7222 8603.2422 -7743.7114 8603.2744 -7743.6895 8603.2842 c
-7743.6895 8603.2842 l
f-7744.1401 8605.1104 m
-7742.2266 8605.5791 -7740.3145 8605.9932 -7738.355 8606.2139 c
-7738.3242 8606.2236 -7738.3022 8606.2021 -7738.293 8606.1699 c
-7738.2954 8606.1494 -7738.3159 8606.1182 -7738.3374 8606.1182 c
-7740.2959 8605.8975 -7742.209 8605.4717 -7744.1206 8605.0029 c
-7744.1426 8605.0049 -7744.1738 8605.0156 -7744.1831 8605.0479 c
-7744.1831 8605.0693 -7744.1719 8605.1006 -7744.1401 8605.1104 c
-7744.1401 8605.1104 l
f-7744.9336 8607.5244 m
-7742.499 8608.3506 -7739.8647 8607.9443 -7737.3457 8607.9775 c
-7737.313 8607.9775 -7737.293 8607.9561 -7737.293 8607.9229 c
-7737.2954 8607.9014 -7737.3159 8607.8818 -7737.3481 8607.8818 c
-7739.8574 8607.8057 -7742.481 8608.2744 -7744.8945 8607.416 c
-7744.9282 8607.417 -7744.959 8607.4287 -7744.9688 8607.4502 c
-7744.9678 8607.4814 -7744.9561 8607.5137 -7744.9336 8607.5244 c
-7744.9336 8607.5244 l
f-7740.0542 8608.7393 m
-7738.6582 8609.4346 -7737.0503 8609.293 -7735.5342 8609.3564 c
-7735.502 8609.3545 -7735.4824 8609.333 -7735.4824 8609.3018 c
-7735.4834 8609.2803 -7735.5054 8609.249 -7735.5366 8609.249 c
-7737.0137 8609.1104 -7738.6489 8609.4131 -7740.0039 8608.6514 c
-7740.0366 8608.6426 -7740.0679 8608.6533 -7740.0786 8608.6758 c
-7740.0879 8608.6973 -7740.0767 8608.7295 -7740.0542 8608.7393 c
-7740.0542 8608.7393 l
f-7739.3418 8605.3145 m
-7738.3926 8605.2871 -7737.4336 8605.2598 -7736.4839 8605.2324 c
-7736.4526 8605.2314 -7736.4312 8605.21 -7736.4336 8605.1777 c
-7736.4336 8605.1455 -7736.4551 8605.125 -7736.4878 8605.126 c
-7737.437 8605.1533 -7738.397 8605.1807 -7739.3457 8605.208 c
-7739.377 8605.208 -7739.3975 8605.2314 -7739.3975 8605.2627 c
-7739.397 8605.2939 -7739.374 8605.3154 -7739.3418 8605.3145 c
-7739.3418 8605.3145 l
f-7737.1592 8602.9258 m
-7736.6895 8602.9541 -7736.209 8602.9619 -7735.7383 8602.9814 c
-7735.7168 8602.9805 -7735.6855 8602.958 -7735.6865 8602.9268 c
-7735.687 8602.8936 -7735.71 8602.874 -7735.7417 8602.874 c
-7736.2114 8602.877 -7736.6816 8602.8271 -7737.1514 8602.8291 c
-7737.1831 8602.8193 -7737.2031 8602.8408 -7737.2134 8602.874 c
-7737.2129 8602.9053 -7737.1914 8602.9268 -7737.1592 8602.9258 c
-7737.1592 8602.9258 l
f-7744.9702 8605.124 m
-7744.5688 8605.4004 -7744.125 8605.5693 -7743.645 8605.6406 c
-7743.6113 8605.6504 -7743.5918 8605.6279 -7743.5806 8605.6064 c
-7743.5703 8605.5752 -7743.5928 8605.5439 -7743.6152 8605.5439 c
-7744.0854 8605.4619 -7744.5176 8605.292 -7744.9209 8605.0371 c
-7744.9521 8605.0273 -7744.9849 8605.0283 -7744.9946 8605.0605 c
-7745.0039 8605.083 -7744.9922 8605.1143 -7744.9702 8605.124 c
-7744.9702 8605.124 l
f-7746.1904 8610.9746 m
-7743.7344 8611.417 -7741.2983 8611.8906 -7738.7993 8611.6162 c
-7738.7778 8611.6162 -7738.7568 8611.5938 -7738.7578 8611.5615 c
-7738.7578 8611.5303 -7738.7798 8611.5088 -7738.8022 8611.5088 c
-7741.291 8611.7627 -7743.7344 8611.374 -7746.1719 8610.8672 c
-7746.1934 8610.8682 -7746.2256 8610.8799 -7746.2344 8610.9111 c
-7746.2344 8610.9326 -7746.2222 8610.9648 -7746.1904 8610.9746 c
-7746.1904 8610.9746 l
f0.195 0.156 0.117 0 k
-7746.166 8599.5342 m
-7743.7969 8599.1572 -7741.4058 8599.2373 -7739.0298 8599.4795 c
-7738.998 8599.4775 -7738.9766 8599.4561 -7738.9766 8599.4248 c
-7738.9785 8599.4033 -7739 8599.3721 -7739.0215 8599.3721 c
-7741.4082 8599.1318 -7743.791 8599.0498 -7746.1694 8599.4287 c
-7746.2026 8599.4287 -7746.2222 8599.4502 -7746.2217 8599.4834 c
-7746.2207 8599.5146 -7746.1992 8599.5361 -7746.166 8599.5342 c
-7746.166 8599.5342 l
f0.335 0.268 0.201 0 k
-7745.4351 8599.001 m
-7742.9282 8599.0049 -7740.4146 8599.167 -7737.918 8598.7861 c
-7737.8862 8598.7842 -7737.8647 8598.7627 -7737.8662 8598.7314 c
-7737.8672 8598.6982 -7737.8896 8598.6787 -7737.9209 8598.6787 c
-7740.418 8599.0596 -7742.9297 8598.9189 -7745.4375 8598.8955 c
-7745.46 8598.8955 -7745.481 8598.917 -7745.4785 8598.9492 c
-7745.4785 8598.9814 -7745.457 8599.002 -7745.4351 8599.001 c
-7745.4351 8599.001 l
f0.205 0.164 0.123 0 k
-7746.9766 8599.2158 m
-7745.5039 8599.5576 -7744.0078 8599.292 -7742.5391 8599.1104 c
-7742.5078 8599.1104 -7742.4873 8599.0869 -7742.499 8599.0557 c
-7742.5 8599.0244 -7742.5215 8599.0029 -7742.5537 8599.0146 c
-7744.0103 8599.1738 -7745.4961 8599.4727 -7746.9473 8599.1084 c
-7746.9785 8599.1104 -7747.0103 8599.1221 -7747.0098 8599.1533 c
-7747.019 8599.1748 -7746.998 8599.2061 -7746.9766 8599.2158 c
-7746.9766 8599.2158 l
f-7740.3535 8598.6846 m
-7739.1978 8598.8115 -7738.0273 8598.7041 -7736.8926 8598.4795 c
-7736.8711 8598.4678 -7736.8506 8598.4463 -7736.8618 8598.4141 c
-7736.8623 8598.3926 -7736.8945 8598.3721 -7736.916 8598.3838 c
-7738.0503 8598.6299 -7739.1914 8598.6836 -7740.3462 8598.5781 c
-7740.3794 8598.5791 -7740.3984 8598.6006 -7740.4087 8598.6221 c
-7740.4082 8598.6543 -7740.3862 8598.6748 -7740.3535 8598.6846 c
-7740.3535 8598.6846 l
f0.335 0.268 0.201 0 k
-7747.2681 8601.3369 m
-7745.9214 8602.0781 -7744.3066 8601.4873 -7742.855 8601.5313 c
-7742.8223 8601.5303 -7742.8022 8601.5088 -7742.8022 8601.4756 c
-7742.8042 8601.4551 -7742.8262 8601.4346 -7742.8574 8601.4346 c
-7744.2886 8601.3799 -7745.8823 8601.9697 -7747.2168 8601.2402 c
-7747.2383 8601.2295 -7747.2695 8601.2412 -7747.291 8601.2637 c
-7747.3008 8601.2852 -7747.2886 8601.3174 -7747.2681 8601.3369 c
-7747.2681 8601.3369 l
f-7745.8945 8603.4541 m
-7743.6719 8603.9346 -7741.3896 8603.5059 -7739.1504 8603.4521 c
-7739.1177 8603.4512 -7739.0977 8603.4287 -7739.0977 8603.3975 c
-7739.1001 8603.376 -7739.1318 8603.3564 -7739.1519 8603.3564 c
-7741.3833 8603.3672 -7743.6519 8603.8701 -7745.875 8603.3467 c
-7745.8975 8603.3467 -7745.9287 8603.3584 -7745.9375 8603.3916 c
-7745.9375 8603.4121 -7745.9258 8603.4443 -7745.8945 8603.4541 c
-7745.8945 8603.4541 l
f-7740.0273 8600.0303 m
-7738.3496 8600.8584 -7736.499 8601.3916 -7734.603 8601.251 c
-7734.5718 8601.251 -7734.5513 8601.2285 -7734.5527 8601.1963 c
-7734.5527 8601.165 -7734.5742 8601.1436 -7734.6074 8601.1455 c
-7736.481 8601.3057 -7738.3198 8600.75 -7739.9873 8599.9443 c
-7740.0078 8599.9346 -7740.041 8599.9346 -7740.0503 8599.9678 c
-7740.061 8599.9893 -7740.061 8600.0205 -7740.0273 8600.0303 c
-7740.0273 8600.0303 l
fu0.5 0.85 1 0.45 k
-7893 8606.7979 m
-7893.0254 8607.3779 -7892.5664 8608.0771 -7891.167 8608.8799 C
-7890.8521 8608.8926 -7889.3945 8608.9131 -7887.0889 8608.9385 C
-7887.0889 8606.7119 L
-7889.1382 8606.7354 -7891.1177 8606.7764 -7893 8606.7979 C
f-7892.5088 8605.8584 m
-7887.0889 8605.7344 L
-7887.0889 8604.7041 L
-7890.644 8604.8486 L
-7891.8145 8605.2197 -7892.5088 8605.8584 V
f0.5 0.85 1 0.32 k
-7887.0889 8605.7148 m
-7892.4746 8605.833 L
-7892.7695 8606.1045 -7892.9849 8606.4463 -7893 8606.8174 C
-7891.1177 8606.7959 -7889.1382 8606.7744 -7887.0889 8606.751 C
-7887.0889 8605.7148 L
f0.5 0.85 1 0.45 k
-7782.1504 8605.5068 m
-7860.3584 8606.4307 -7887.1079 8606.7314 V
-7887.1079 8608.9385 L
-7870.8145 8609.1221 -7811.9902 8609.5967 Y
-7777.749 8608.5537 L
-7778.457 8605.458 L
-7782.1504 8605.5068 L
f0.5 0.85 1 0.12 k
-7887.1079 8604.7041 m
-7887.1079 8605.7344 L
-7778.4258 8603.8896 L
-7778.3833 8601.7529 L
-7811.6553 8601.6025 L
-7887.1079 8604.7041 L
fu0.065 0.052 0.039 0 k
-7755.0728 8600.0361 m
-7755.0366 8601.3154 L
-7755.2954 8600.0068 L
-7773.897 8604.5459 L
-7774.9375 8604.1631 L
-7774.8794 8604.4951 -7774.8398 8604.8467 -7774.8306 8605.2119 c
-7774.8242 8605.418 -7774.8281 8605.6182 -7774.8398 8605.8154 C
-7766.3862 8606.9883 -7756.9634 8602.5615 -7755.0366 8601.3154 C
-7754.7402 8611.6455 L
-7754.041 8611.751 L
-7753.8042 8604.0967 L
-7748.1816 8604.0439 L
-7748.0898 8601.9033 -7748.0718 8599.9111 -7748.2407 8598.9248 C
-7755.0728 8600.0361 L
f0.4 0.7 1 0 k
-7778.457 8605.4775 m
-7778.4258 8603.8701 L
-7887.1079 8605.7148 L
-7887.1079 8606.751 L
-7860.3584 8606.4502 -7778.457 8605.4775 Y
fUU0.025 0.02 0.015 0 k
-7742.7344 8607.9189 m
-7742.7344 8607.9521 -7742.7129 8607.9717 -7742.6802 8607.9717 c
-7739.6714 8608.0029 -7737.4214 8607.835 -7734.415 8607.749 C
-7734.4087 8607.6553 L
-7737.3262 8607.7598 -7739.7607 8607.8975 -7742.6841 8607.8643 C
-7742.7168 8607.8662 -7742.7358 8607.8877 -7742.7344 8607.9189 C
f-7734.3994 8607.6553 m
-7734.4082 8607.6338 L
-7734.4087 8607.6553 L
-7734.4063 8607.6553 -7734.4033 8607.6553 -7734.3994 8607.6553 C
f-7738.4487 8606.3135 m
-7739.4458 8606.1816 -7740.3394 8606.6553 -7741.2114 8607.0869 C
-7741.2441 8607.0977 -7741.2534 8607.1299 -7741.2422 8607.1611 C
-7741.2305 8607.1826 -7741.1982 8607.1924 -7741.1777 8607.1807 c
-7740.3262 8606.7197 -7739.4312 8606.3096 -7738.4678 8606.4092 c
-7737.1079 8606.5518 -7735.9038 8607.2646 -7734.5254 8607.3428 C
-7734.4463 8607.249 L
-7736.04 8607.1553 -7736.8647 8606.5127 -7738.4487 8606.3135 c
fUU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 50)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7892 8610.8896 m
-7764.877 8610.8896 L
-7764.877 8563.3047 L
-7892 8563.3047 L
-7892 8610.8896 L
nu*u
0 O
0.9529 0.949 0.1961 0.0745 k
-7865.793 8595.3066 m
-7865.8232 8595.1572 L
-7867.9849 8589.2539 -7868.9438 8586.5273 -7869.2754 8585.1787 c
-7869.3657 8585.1787 L
-7869.6953 8586.4971 -7870.7754 8589.2246 -7872.9673 8595.1572 c
-7872.9966 8595.3066 L
-7865.793 8595.3066 l
f1 D
-7876.1182 8603.8574 m
-7877.6191 8607.4268 -7878.3994 8609.5986 -7876.1182 8609.8066 c
-7876.1182 8610.8574 L
-7878.6992 8610.8271 -7881.5806 8610.8066 -7884.3418 8610.8066 c
-7888.0649 8610.8066 -7890.5273 8610.8271 -7892 8610.8574 c
-7892 8609.8066 L
-7890.1064 8609.5986 -7889.0542 8607.457 -7881.5513 8590.3926 c
-7869.6953 8563.3047 L
-7867.8638 8563.3047 L
-7856.1582 8590.3926 L
-7848.8047 8607.3975 -7847.7246 8609.5986 -7845.8887 8609.8066 c
-7845.8887 8610.8574 L
-7847.5142 8610.8271 -7849.916 8610.8066 -7853.5767 8610.8066 c
-7856.5488 8610.8066 -7859.6694 8610.8271 -7862.7026 8610.8574 c
-7862.7026 8609.8066 L
-7860.481 8609.5986 -7861.3218 8607.3975 -7862.7617 8603.8574 C
-7876.1182 8603.8574 l
f*U
*u
0 D
-7821.0762 8578.9707 m
-7821.0762 8575.3613 -7823.3535 8572.9844 -7827.1294 8572.9844 c
-7828.2383 8572.9844 -7829.0767 8573.1055 -7829.5273 8573.1348 c
-7829.5273 8585.4375 L
-7828.8672 8585.498 -7828.208 8585.498 -7827.729 8585.498 c
-7826.2002 8585.498 -7824.7026 8585.0166 -7823.6841 8584.2949 c
-7822.3945 8583.4229 -7821.0762 8581.6777 -7821.0762 8579.0313 C
-7821.0762 8578.9707 l
f1 D
-7840.0806 8583.2822 m
-7840.0806 8567.5342 -7840.0806 8565.3184 -7842.542 8565.168 c
-7842.542 8564.208 L
-7841.042 8564.1484 -7838.3174 8564.0889 -7835.5664 8564.0586 c
-7833.6538 8563.998 -7830.3945 8563.9082 -7828.1479 8563.8672 c
-7824.582 8563.8672 -7821.585 8564.3154 -7819.0049 8565.1523 c
-7814.353 8566.7373 -7809.9702 8570.7422 -7809.9702 8578.5498 c
-7809.9702 8583.6328 -7812.4014 8587.209 -7814.5034 8588.9502 c
-7815.583 8589.9111 -7816.8135 8590.7217 -7817.7744 8591.2021 c
-7817.7744 8591.3525 L
-7815.5234 8594.3809 -7813.6025 8596.9521 -7807.3906 8605.5322 c
-7805.5 8607.9541 -7803.9102 8609.6279 -7802.7402 8609.8672 c
-7802.7402 8610.8896 L
-7804.6602 8610.8896 -7807 8610.7744 -7809.1294 8610.7744 c
-7811.3511 8610.7744 -7812.8521 8610.8896 -7814.4424 8610.8896 c
-7815.6729 8610.8896 -7816.7241 8610.8301 -7817.5039 8610.1621 c
-7821.0151 8604.7373 -7824.9121 8598.6455 -7828.1182 8593.6035 c
-7828.5078 8593.6035 -7828.957 8593.6035 -7829.5273 8593.6035 c
-7829.5273 8596.1748 L
-7829.5273 8607.416 -7829.437 8609.6582 -7827.1895 8609.8672 c
-7827.1895 8610.8594 L
-7828.6279 8610.8301 -7831.9194 8610.8047 -7834.6992 8610.8047 c
-7837.9287 8610.8047 -7840.8921 8610.8301 -7842.5122 8610.8594 c
-7842.5122 8609.8672 L
-7840.0518 8609.6582 -7840.0806 8607.416 -7840.0806 8590.4814 C
-7840.0806 8583.2822 l
f*U
*u
0 D
-7789.4561 8590.4824 m
-7789.4561 8607.3838 -7789.4561 8609.5381 -7792.2832 8609.8672 C
-7792.2832 8610.8594 l
-7790.3887 8610.8301 -7787.0542 8610.8047 -7783.7822 8610.8047 c
-7780.6294 8610.8047 -7777.5688 8610.8301 -7775.2881 8610.8594 C
-7775.2881 8609.8672 l
-7778.2578 8609.8672 -7778.2881 8607.4141 -7778.2881 8590.4824 C
-7778.2881 8573.041 L
-7770.8193 8573.041 l
-7767.999 8573.041 -7766.5298 8573.8496 -7765.8994 8576.1523 C
-7764.9072 8576.1523 l
-7764.9072 8571.3594 -7764.877 8567.3047 -7764.877 8564.0605 c
-7769.3486 8564.0908 -7774.748 8564.1211 -7780.0601 8564.1211 C
-7787.7446 8564.1211 l
-7792.5537 8564.1211 -7797.9966 8564.0908 -7802.9614 8564.0605 c
-7802.9614 8567.2744 -7802.9326 8571.3594 -7802.9326 8576.1523 C
-7801.9072 8576.1523 l
-7801.3657 8573.999 -7799.771 8573.041 -7796.9438 8573.041 C
-7789.4561 8573.041 l
-7789.4561 8590.4824 L
f*U
UU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 6)
0 A
u1 Ap
0 J 0 j 1 w 4 M []0 d0 XR
-7892.75 8587.8896 m
-7892.75 8611.8896 L
-7882.75 8611.8896 L
-7882.75 8587.8896 L
-7892.75 8587.8896 L
n0 Ap
0 O
1 g
-7882.75 8589.8896 m
-7883.0703 8589.8896 -7883.3857 8589.9082 -7883.6982 8589.9375 c
-7885.5879 8590.1152 -7887.3198 8590.8242 -7888.7559 8591.9072 c
-7890.2529 8593.0361 -7891.4199 8594.5713 -7892.0942 8596.3535 c
-7892.5122 8597.4541 -7892.75 8598.6426 -7892.75 8599.8896 c
-7892.75 8601.752 -7892.2319 8603.4893 -7891.3457 8604.9814 c
-7889.6025 8607.917 -7886.4102 8609.8896 -7882.75 8609.8896 C
-7882.75 8589.8896 L
f0 R
0 G
1 J 1 j 0.5 w-7882.75 8609.5713 m
-7885.7793 8608.6152 -7888.6074 8606.957 -7891.3457 8604.9814 C
S-7882.75 8603.9385 m
-7885.8999 8601.5332 -7888.957 8598.8027 -7892.0942 8596.3535 C
S-7888.7559 8591.9072 m
-7886.6904 8592.998 -7884.7017 8594.3564 -7882.75 8595.8467 C
S-7883.6982 8589.9375 m
-7883.3809 8590.0205 -7883.063 8590.1045 -7882.75 8590.2041 C
S-7888.7559 8591.9072 m
-7887.3193 8590.8252 -7885.5879 8590.1152 -7883.6982 8589.9375 C
S-7892.0942 8596.3535 m
-7892.5122 8597.4541 -7892.75 8598.6426 -7892.75 8599.8896 c
-7892.75 8601.752 -7892.231 8603.4893 -7891.3457 8604.9814 C
S-7882.75 8589.8896 m
-7883.0703 8589.8896 -7883.3857 8589.9082 -7883.6982 8589.9375 C
S-7888.7559 8591.9072 m
-7890.2529 8593.0361 -7891.4199 8594.5713 -7892.0942 8596.3535 C
S-7891.3457 8604.9814 m
-7889.6025 8607.917 -7886.4102 8609.8896 -7882.75 8609.8896 C
SU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 62)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7893 8611.8896 m
-7893 8573.6201 L
-7854.7305 8573.6201 L
-7854.7305 8611.8896 L
-7893 8611.8896 L
n0 O
1 0.14 0.09 0 k
-7854.7305 8594.7939 m
-7854.7305 8586.2305 L
-7893 8586.2305 L
-7893 8594.7939 L
-7854.7305 8594.7939 L
f-7854.7305 8597.9863 m
-7854.7305 8597.3125 L
-7893 8597.3125 L
-7893 8597.9863 L
-7854.7305 8597.9863 L
fU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 63)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7893 8611.8896 m
-7893 8573.6201 L
-7854.7305 8573.6201 L
-7854.7305 8611.8896 L
-7893 8611.8896 L
n0 O
1 0.14 0.09 0 k
-7854.7305 8590.7158 m
-7854.7305 8599.2793 L
-7867.3408 8599.2793 L
-7867.3408 8611.8896 L
-7875.9038 8611.8896 L
-7875.9063 8590.7158 L
-7875.9038 8590.7158 L
-7875.9038 8590.7148 L
-7854.7305 8590.7158 L
f-7854.7305 8588.1973 m
-7878.4233 8588.1973 L
-7878.4233 8611.8896 L
-7879.0967 8611.8896 L
-7879.0977 8587.5225 L
-7854.7305 8587.5225 L
-7854.7305 8588.1973 L
fU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 64)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7893 8611.8887 m
-7893 8573.6182 L
-7854.7305 8573.6182 L
-7854.7305 8611.8887 L
-7893 8611.8887 L
n0 O
1 0.14 0.09 0 k
-7854.7305 8586.2285 m
-7880.3896 8586.2285 L
-7880.3896 8611.8887 L
-7871.8262 8611.8896 L
-7871.8262 8594.793 L
-7854.7305 8594.793 L
-7854.7305 8586.2285 L
f-7854.7305 8597.3115 m
-7869.3081 8597.3115 L
-7869.3081 8611.8896 L
-7868.6338 8611.8896 L
-7868.6338 8597.9854 L
-7854.7305 8597.9854 L
-7854.7305 8597.3115 L
fU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 65)
0 A
u1 Ap
0 J 0 j 1 w 4 M []0 d0 XR
-7865.0625 8584.3506 m
-7892.6025 8584.3506 L
-7892.6025 8611.8896 L
-7865.0625 8611.8896 L
-7865.0625 8584.3506 L
n0 O
0 0.55 1 0.12 k
-7864.8418 8597.5898 m
-7893 8597.5898 L
-7893 8598.7148 L
-7864.8418 8598.7148 L
-7864.8418 8597.5898 L
fu0 0.55 1 0.3 k
-7891.9814 8585.4111 m
-7892.4102 8587.415 -7891.1865 8591.041 -7888.0874 8594.1406 c
-7884.9878 8597.2393 -7881.3457 8598.5498 -7879.3594 8598.0352 C
-7879.3594 8598.0352 L
-7878.875 8596.0791 -7880.1519 8592.4014 -7883.25 8589.3037 c
-7886.3457 8586.208 -7890.0122 8584.9961 -7891.9814 8585.4111 C
f0 0.39 0.7 0.12 k
-7891.9814 8610.8809 m
-7892.4102 8608.8779 -7891.1865 8605.251 -7888.0874 8602.1514 c
-7884.9878 8599.0537 -7881.3457 8597.7432 -7879.3594 8598.2568 C
-7879.3594 8598.2568 L
-7878.875 8600.2139 -7880.1519 8603.8906 -7883.25 8606.9893 c
-7886.3457 8610.085 -7890.0122 8611.2959 -7891.9814 8610.8809 C
fUu0 0.55 1 0.3 k
-7878.1782 8610.8809 m
-7878.6074 8608.8779 -7877.3838 8605.251 -7874.2842 8602.1514 c
-7871.1855 8599.0537 -7867.543 8597.7432 -7865.5576 8598.2568 C
-7865.5566 8598.2568 L
-7865.0718 8600.2139 -7866.3496 8603.8906 -7869.4473 8606.9893 c
-7872.543 8610.085 -7876.209 8611.2959 -7878.1782 8610.8809 C
f0 0.39 0.7 0.12 k
-7878.1782 8585.4111 m
-7878.6074 8587.415 -7877.3838 8591.041 -7874.2842 8594.1406 c
-7871.1855 8597.2393 -7867.543 8598.5498 -7865.5576 8598.0352 C
-7865.5566 8598.0352 L
-7865.0718 8596.0791 -7866.3496 8592.4014 -7869.4473 8589.3037 c
-7872.543 8586.208 -7876.209 8584.9961 -7878.1782 8585.4111 C
fUU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 67)
0 A
u0 Ap
0 J 0 j 1 w 4 M []0 d0 XR
-7865.4609 8583.9746 m
-7893 8583.9746 L
-7893 8611.5137 L
-7865.4609 8611.5137 L
-7865.4609 8583.9746 L
n0 O
0 0.55 1 0.12 k
-7879.7598 8602.252 m
-7879.7598 8611.8896 L
-7878.6343 8611.8896 L
-7878.6343 8602.252 L
-7879.7598 8602.252 L
f0 0.55 1 0.3 k
-7883.4233 8597.7656 m
-7882.3096 8596.0449 -7878.8809 8594.3467 -7874.4966 8594.3467 c
-7870.1152 8594.3467 -7866.6138 8595.9961 -7865.5718 8597.7637 C
-7865.5718 8597.7637 L
-7866.6138 8599.4902 -7870.1152 8601.1875 -7874.4966 8601.1875 c
-7878.875 8601.1875 -7882.3242 8599.4512 -7883.4233 8597.7656 C
fU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 69)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7865.4609 8584.3506 m
-7893 8584.3506 L
-7893 8611.8896 L
-7865.4609 8611.8896 L
-7865.4609 8584.3506 L
n0 O
0 0.55 1 0.3 k
-7883.4233 8598.1416 m
-7882.3096 8596.4209 -7878.8809 8594.7227 -7874.4966 8594.7227 c
-7870.1152 8594.7227 -7866.6138 8596.3721 -7865.5718 8598.1396 C
-7865.5718 8598.1396 L
-7866.6138 8599.8662 -7870.1152 8601.5635 -7874.4966 8601.5635 c
-7878.875 8601.5635 -7882.3242 8599.8271 -7883.4233 8598.1416 C
fU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 8)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7891.9521 8609.2021 m
-7784.7954 8609.2021 L
-7784.7954 8595.0752 L
-7891.9521 8595.0752 L
-7891.9521 8609.2021 L
nu0 O
0 0 0 1 k
-7890.2832 8608.5127 m
-7890.8535 8610.8896 -7890.8184 8606.8936 V
-7891.0479 8603.6924 L
-7891.6167 8601.3447 L
-7891.4502 8599.0127 L
-7889.9502 8598.3447 -7873.2832 8597.0127 V
-7866.6167 8595.6787 -7857.6167 8595.6787 V
-7792.3936 8596.3662 -7787.4912 8597.7744 v
-7828.3882 8595.7646 -7830.9688 8596.4014 v
-7791.8569 8598.0498 -7788.8545 8599.3213 v
-7826.79 8597.4365 -7830.167 8599.0674 v
-7795.249 8600.7998 -7791.021 8602.4209 v
-7797.7217 8601.7725 -7799.5127 8601.9717 v
-7796.3896 8602.46 l
-7801.4194 8602.3916 l
-7804.3218 8602.0186 l
-7796.4521 8603.1318 -7795.9033 8603.6982 v
-7792.3154 8603.0205 -7806.5186 8603.2744 v
-7840.1177 8599.3447 -7890.2832 8608.5127 V
f/BBAccumRotation (5.805971) XT
0 R
0 0 0 0.5 K
0.025 w-7891.9502 8598.0127 m
-7871.667 8596.1846 -7851.9727 8595.1104 v
-7809.1514 8595.3916 -7804.5737 8595.79 v
-7792.1631 8595.9209 -7784.7959 8596.917 v
S/BBAccumRotation (5.805971) XT
0 0 0 1 K
-7829.8369 8595.2979 m
-7833.2959 8594.917 -7859.2607 8595.1689 Y
-7869.627 8595.0498 -7891.9502 8598.0127 Y
S/BBAccumRotation (5.805971) XT
-7828.9873 8598.5537 m
-7798.3608 8599.4717 -7791.6606 8600.1221 v
S/BBAccumRotation (5.805971) XT
0 0 0 0.5 K
-7837.6201 8603.0947 m
-7802.3706 8604.5068 -7799.4058 8605.0303 v
S/BBAccumRotation (5.805971) XT
UU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 83)
0 A
u0 J 0 j 1 w 4 M []0 d0 XR
-7892 8610.8252 m
-7678.4009 8610.8252 L
-7678.4009 8603.0244 L
-7892 8603.0244 L
-7892 8610.8252 L
n0 O
0 0 0 1 k
-7892 8606.9248 m
-7881.9858 8609.417 -7875.187 8610.7646 -7863.2007 8610.8252 c
-7850.2183 8610.8896 -7785.2002 8610.8252 y
-7720.1816 8610.8896 -7707.2002 8610.8252 v
-7695.2129 8610.7646 -7688.415 8609.417 -7678.4009 8606.9248 C
-7688.415 8604.4326 -7695.2129 8603.085 -7707.2002 8603.0244 c
-7720.1816 8602.959 -7785.2002 8603.0244 y
-7850.2183 8602.959 -7863.2007 8603.0244 v
-7875.187 8603.085 -7881.9858 8604.4326 -7892 8606.9248 C
fU%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 6 pt Flat / Adobe Calligraphic Brush T) -
(ool/ 10 pt Oval/ Adobe Calligraphic Brush Tool/ 12 pt Oval / Adobe Cal) -
(ligraphic Brush Tool/ 20 pt Oval/ Adobe Calligraphic Brush Tool/ 25 pt) -
( Round / Adobe Calligraphic Brush Tool/ 50 pt Flat/ Adobe Scatter Brus) -
(h Tool/ Dog Tracks/ Adobe Scatter Brush Tool/ Fall Leaf/ Adobe Scatter) -
( Brush Tool/ Ladybug/ Adobe Scatter Brush Tool/ Push Pin/ Adobe Scatte) -
(r Brush Tool/ Strawberry/ Adobe Scatter Brush Tool/ Twinkle Star / Ado) -
(be ArtOnPath Brush Tool/ Marker/ Adobe ArtOnPath Brush Tool/ Tapered S) -
(troke/ Adobe ArtOnPath Brush Tool/ Arrow/ Adobe ArtOnPath Brush Tool/ ) -
(Paintbrush/ Adobe ArtOnPath Brush Tool/ Type/ Adobe PatternOnPath Brus) -
(h Tool/ Double Lines/ Adobe PatternOnPath Brush Tool/ Laurel/ Adobe Pa) -
(tternOnPath Brush Tool/ Rope /) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Scatter Brush Tool)
(Dog Tracks)
(1 /New Pattern 41/ 1 0 0 0 1 / 0 1 1 0 1 1 0 0 0 0 -90 -90 0 1 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Scatter Brush Tool)
(Fall Leaf)
(1 /New Pattern 34/ 1 0.0745 0.9 0.9019 0.18 / 0 0.602793 1 1 0.1 1 1 -) -
(1 1 1 -180 180 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Scatter Brush Tool)
(Ladybug)
(1 /New Pattern 10/ 5 0.898039 0 0 / 0 1 1 0 0.803911 1.2 1 -1.55 1.55 ) -
(1 -180 180 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Scatter Brush Tool)
(Push Pin)
(1 /New Pattern 36/ 1 0.025 0.1 0.475 0 / 0 1 1 0 0.401676 1 1 -1.06145) -
( 1.06 1 -180 180 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Scatter Brush Tool)
(Strawberry)
(1 /New Pattern 37/ 1 0 0 0 1 / 0 0.803911 1 1 0.803911 1 1 -0.5 0.5 1 ) -
(-75 75.419 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Scatter Brush Tool)
(Twinkle Star )
(1 /New Pattern 2/ 0 1 / 1 0.5 1 1 0.25 1 1 -0.5 0.5 1 0 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(10 pt Oval)
(1 1 19 15 15 130 130 2 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(12 pt Oval )
(1 7 17 45 45 0 0 2 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(20 pt Oval)
(1 20 20 20 100 40 80 0 2 1 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(25 pt Round )
(1 10 40 100 100 0 0 2 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(50 pt Flat)
(1 40 60 0 0 44 44 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(6 pt Flat )
(1 4 8 10 10 90 90 2 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Arrow)
(1 / New Pattern 45/ / / / / 5 0.898039 0 0 /  2 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Marker)
(1 / New Pattern 8/ / / / / 0 0 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Paintbrush)
(1 / New Pattern 5/ / / / / 1 0.5 0.85 1 0.45 /  0 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Tapered Stroke)
(1 / New Pattern 83/ / / / / 1 0 0 0 1 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Type)
(1 / New Pattern 50/ / / / / 1 0.952941 0.94902 0.196078 0.0745098 /  1) -
( 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Double Lines)
(1 / New Pattern 62/ New Pattern 63/ New Pattern 64/ / / 1 1 0.14 0.09 ) -
(0 /  1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Laurel)
(1 / New Pattern 65/ New Pattern 42/ New Pattern 67/ / New Pattern 69/ ) -
(1 0 0.55 1 0.3 /  1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Rope )
(1 / New Pattern 1/ / / New Pattern 3/ New Pattern 6/ 5 0 0 0 /  1 0 1 ) -
(0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
0 0 0 0 k
(C=0 M=0 Y=0 K=0) Pc
0 0 0 1 k
(C=0 M=0 Y=0 K=100) Pc
0 0.1 1 0 k
(C=0 M=10 Y=100 K=0) Pc
0 0.5 0 0 k
(C=0 M=50 Y=0 K=0) Pc
0 0.5 1 0 k
(C=0 M=50 Y=100 K=0) Pc
1 0.55 1 0 k
(C=100 M=55 Y=100 K=0) Pc
1 0.9 0.1 0 k
(C=100 M=90 Y=10 K=0) Pc
0.15 1 1 0 k
(C=15 M=100 Y=100 K=0) Pc
0.45 0.9 0 0 k
(C=45 M=90 Y=0 K=0) Pc
0.5 0.4 0.3 0 k
(C=50 M=40 Y=30 K=0) Pc
0.5 0.85 1 0 k
(C=50 M=85 Y=100 K=0) Pc
0.75 0.05 1 0 k
(C=75 M=5 Y=100 K=0) Pc
0.75 0.9 0 0 k
(C=75 M=90 Y=0 K=0) Pc
0.8 0.05 0 0 k
(C=80 M=5 Y=0 K=0) Pc
Bb
2 (Black, White) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Black, White) Pc
Bb
2 (Chrome) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Chrome) Pc
Bb
2 (Rainbow) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Rainbow) Pc
Bb
0 0 0 0 Bh
2 (Yellow & Orange Radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Yellow & Orange Radial) Pc
(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Brick) Pc
(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Confetti) Pc
(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Leaves - Fall ) Pc
(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Stripes) Pc
0 0.91 0.76 0.06 (PANTONE 186 CVC) 0 x
(PANTONE 186 CVC) Pc
0 0.91 0.72 0.23 (PANTONE 187 CVC) 0 x
(PANTONE 187 CVC) Pc
0 0.91 0.72 0.3 k
(New Color Swatch) Pc
0 0.91 0.72 0.35 k
(New Color Swatch 3) Pc
0 0.91 0.72 0.47 k
(New Color Swatch 2) Pc
0 1 0.72 0.35 k
(New Color Swatch 4) Pc
0.1 1 0.6 0.3 k
(New Color Swatch 8) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
*u
0 O
0 0 0 1 k
0 J 0 j 1 w 4 M []0 d0 XR
192.8965 402.0547 m
196.0527 402.1816 201.2324 402.4346 204.0059 402.4346 c
219.5332 402.4346 224.834 394.3545 224.834 385.5166 c
224.834 375.6699 218.7744 370.875 206.6582 370.875 C
192.8965 370.875 l
192.8965 402.0547 L
f1 D
182.4229 337.9297 m
182.4229 329.9707 180.4014 327.5752 170.0537 327.5752 C
167.1445 327.5752 L
167.1445 325.1777 L
213.3457 325.1777 l
233.6729 325.1777 240.6123 339.1895 240.6123 349.1621 c
240.6123 359.0059 233.6729 366.709 221.8096 370.2432 C
221.8096 370.4961 l
230.2666 372.0127 236.1963 378.6992 236.1963 385.8926 c
236.1963 391.9551 233.6729 396.25 228.4961 399.9043 c
223.9512 403.1895 214.2314 404.832 203.125 404.832 c
200.7227 404.832 191.1318 404.708 184.1846 404.4502 c
180.5283 404.3242 171.8154 403.8184 168.2813 403.6982 C
168.2813 401.2969 L
172.7002 401.2969 l
181.5352 401.2969 182.4229 397.5107 182.4229 390.3174 c
182.4229 337.9297 L
f0 D
192.8965 368.4775 m
206.5293 368.4775 l
221.2998 368.4775 228.749 358.5 228.749 348.7803 c
228.749 338.9375 223.9512 328.5869 207.2881 328.5869 c
196.6816 328.5869 192.8965 331.9971 192.8965 341.5879 c
192.8965 368.4775 L
f*U
*u
1 D
368.4824 401.2969 m
368.4824 403.6982 L
337.8057 403.6982 L
337.8057 401.2969 L
344.874 400.9209 347.2764 399.0283 347.2764 392.209 C
347.2764 338.4326 L
347.2764 330.2295 345.7148 328.0918 338.4883 327.6201 C
328.8604 328.127 324.7725 331.9033 317.8643 338.8066 C
307.9014 348.7803 L
301.9746 354.7139 298.187 358.2529 293.5156 361.9111 C
303.8672 364.9385 310.2979 372.8945 310.2979 382.3604 c
310.2979 395.2363 299.8242 404.832 276.4668 404.832 c
268.2568 404.832 265.7324 404.708 260.5576 404.4502 c
255.3838 404.2012 247.6807 403.6982 244.6533 403.6982 C
244.6533 401.2969 L
247.4307 401.2969 L
254.752 401.2969 256.8984 399.0283 256.8984 391.1963 C
256.8984 338.0527 L
256.8984 329.5918 254.2451 327.5752 246.7998 327.5752 C
244.6533 327.5752 L
244.6533 325.1777 L
280.3838 325.1777 L
280.3838 327.5752 L
277.4766 327.5752 L
270.4043 327.5752 267.376 329.4707 267.376 337.0449 C
267.376 358.3789 L
269.3965 358.2529 271.0371 358.1211 273.8154 358.1211 c
277.2275 358.1211 279.2471 358.2529 282.4058 358.3789 C
285.4375 356.3574 289.8594 352.6992 295.4111 347.1436 C
303.7393 338.8066 L
314.6533 327.8857 319.3086 324.4336 339.8652 325.1777 C
368.4824 325.1777 L
368.4824 327.5752 L
359.7725 327.5752 357.7539 330.0996 357.7539 337.5479 C
357.7539 391.0703 L
357.7539 399.5283 360.5322 401.2969 368.4824 401.2969 C
f0 D
275.2061 360.5234 m
272.2979 360.5234 270.4043 360.3984 267.376 360.7744 C
267.376 402.1816 L
269.6475 402.4346 271.2891 402.4346 273.6885 402.4346 c
293.1406 402.4346 298.4351 393.3408 298.4351 381.6055 c
298.4351 366.457 289.2275 360.5234 275.2061 360.5234 c
f*U
*u
377.0654 344.3652 m
379.7197 333.1289 388.5508 326.5674 398.3994 326.5674 c
406.8584 326.5674 415.8154 331.4873 415.8154 341.459 c
415.8154 359.6406 375.2979 365.1934 375.2979 387.2822 c
375.2979 397.7646 384.8916 405.5898 397.7695 405.5898 c
408.3672 405.5898 410.5176 402.4346 414.9365 402.4346 c
415.9434 402.4346 416.4482 402.6865 417.208 403.6982 c
419.2266 403.6982 L
421.3711 387.6641 L
419.2266 387.6641 L
415.6914 396.752 407.6143 402.5576 398.9014 402.5576 c
390.5684 402.5576 384.7617 397.7646 384.7617 390.6934 c
384.7617 372.7676 425.2852 367.9678 425.2852 344.7461 c
425.2852 332.374 414.2998 323.1572 399.5342 323.1572 c
392.5879 323.1572 383.7588 326.5674 381.9902 326.5674 c
380.8525 326.5674 379.9658 325.9385 379.4639 325.1777 c
377.3174 325.1777 L
374.6699 344.3652 L
377.0654 344.3652 l
f*U
*u
473.8887 336.79 m
473.8887 329.9707 476.1553 327.5752 483.8545 327.5752 c
488.5322 327.5752 L
488.5322 325.1777 L
448.7637 325.1777 L
448.7637 327.5752 L
453.4385 327.5752 L
461.1377 327.5752 463.4072 329.9707 463.4072 336.79 c
463.4072 399.1475 L
441.4404 399.1475 L
436.3945 399.1475 434.1211 396.25 432.2236 385.1406 c
429.9561 385.1406 L
431.9756 405.5898 L
434.3721 405.5898 L
434.502 404.832 435.0068 404.3242 435.7617 404.0742 c
436.5205 403.8184 437.4053 403.6982 438.2861 403.6982 c
499.0049 403.6982 L
500.7744 403.6982 502.667 404.0742 502.9229 405.5898 c
505.3174 405.5898 L
507.3398 385.1406 L
505.0645 385.1406 L
503.1738 396.25 500.9014 399.1475 495.8545 399.1475 c
473.8887 399.1475 L
473.8887 336.79 l
f*U
*u
587.8975 362.4189 m
587.8975 344.4941 578.0537 326.3184 557.4785 326.3184 c
537.1514 326.3184 521.124 342.9746 521.124 366.582 c
521.124 381.7324 529.9541 402.4346 552.1748 402.4346 c
573.0049 402.4346 587.8975 385.8926 587.8975 362.4189 c
f1 D
599.7646 366.582 m
599.7646 389.3037 579.3145 405.5898 555.458 405.5898 c
528.5723 405.5898 509.2529 387.791 509.2529 362.6719 c
509.2529 339.0605 530.0859 323.1572 554.8291 323.1572 c
579.3145 323.1572 599.7646 341.082 599.7646 366.582 c
f*U
*u
0 D
658.416 325.1777 m
601.9893 325.1777 L
601.9893 327.5752 L
606.1533 327.5752 L
611.959 327.5752 614.1035 329.4707 614.1035 335.9082 c
614.1035 391.833 L
614.1035 398.5205 612.0859 401.2969 604.1348 401.2969 c
602.3672 401.2969 L
602.3672 403.6982 L
639.6045 403.6982 L
639.6045 401.2969 L
634.9307 401.2969 L
626.7314 401.2969 624.5791 400.4131 624.5791 392.5859 c
624.5791 334.3945 L
624.5791 330.9844 625.9736 329.7207 629.6299 329.7207 c
648.1865 329.7207 L
655.6338 329.7207 657.9023 332.626 665.8604 343.6064 c
668.1309 343.6064 L
658.416 325.1777 l
f*U
u48.5562 470.6714 m
66.1343 462.1484 68.6279 447.1304 68.7202 439.7827 C
71.1523 439.52 73.5273 439.1338 75.8691 438.667 C
74.9907 449.9194 66.4058 465 48.5562 470.6714 C
n0 O
0 g
68.7202 439.7827 m
68.6279 447.1304 66.1343 462.1484 48.5562 470.6714 C
66.4058 465 74.9907 449.9194 75.8691 438.667 C
94.6084 434.9316 111.2383 426.1128 138.2402 435.4253 C
138.3335 435.4849 L
102.8008 435.1611 87.9419 445.9106 V
95.6167 445.6211 104.4497 447.3584 107.3452 451.7026 c
110.4312 456.3311 110.7495 461.1113 118.3506 461.356 c
122.6216 461.4941 137.104 460.4131 138.6226 481.6772 C
133.9893 473.8574 128.9697 470.6235 121.3911 472.5542 c
116.5532 473.7866 107.7212 477.4888 101.4087 469.9478 c
96.1963 463.7217 90.5977 460.4873 81.6675 461.4526 C
85.2397 466.2793 138.4785 535.3984 Y
70.2764 480.6626 66.5117 477.4775 V
65.7876 487.4688 68.7798 491.1372 72.7861 495.5293 c
76.0635 499.123 81.7627 503.9893 77.2261 514.2578 c
73.5586 522.5596 74.041 527.5796 84.0327 535.5435 C
76.0684 534.9639 63.9146 529.6074 65.3525 514.9814 c
66.2217 506.1484 59.9634 505.3843 57.6782 504.1216 c
51.7412 500.8394 50.9683 491.2817 50.7764 483.8491 C
50.1001 486.2622 41.4619 523.4063 38.4209 535.4248 C
38.4194 535.4185 38.4199 435.4849 Y
38.6489 435.4849 L
50.2236 440.0425 59.8525 440.7402 68.7202 439.7827 C
fUu*u
1 D
138.1787 425.2041 m
93.145 410.4346 77.7944 441.7114 38.4077 425.2041 C
38.3901 425.2134 38.4131 323.8467 38.4077 325.1455 C
81.2695 341.0732 82.8643 311.6787 138.1787 325.1455 C
138.1772 325.1514 138.1787 426.7998 138.1787 425.2041 C
f0 D
56.5015 373.9668 m
56.2666 373.8574 56.1494 373.6309 56.0859 373.498 c
55.6704 372.627 54.396 368.1172 54.0586 366.8594 c
53.7207 365.6074 53.3589 365.4121 52.6582 365.1973 c
52.0811 365.0176 52.002 363.625 52.5381 363.459 c
54.1753 362.9531 53.8203 361.9092 53.7021 361.6563 C
53.6929 361.3545 53.1572 358.4795 51.1138 356.4375 C
50.0522 358.5117 49.7983 360.5859 49.6055 361.0684 c
49.4126 361.5508 49.3403 362.1777 49.3887 362.6621 c
49.4365 363.1445 49.2798 365.2207 49.2314 365.752 c
49.1836 366.2813 49.4214 366.75 49.6421 367.1523 c
50.0522 367.9004 52.8516 373.1855 54.1064 376.4199 c
54.5728 377.6211 57.3647 378.8076 58.04 378.5176 c
58.7983 378.1934 59.7051 377.0957 63.7603 375.4531 C
63.8569 374.3438 64.0977 372.123 64.6772 371.2051 C
63.7603 370.8203 62.2642 370.6758 Y
58.9189 373.3867 58.2759 374.0391 v
58.1724 374.1445 57.8325 374.3379 57.6548 374.3086 c
57.2954 374.25 56.8623 374.1328 56.5015 373.9668 c
f94.4585 341.4492 m
93.7822 342.002 92.6919 341.0508 93.2515 340.1719 c
93.9268 339.1055 93.8789 338.4785 Y
91.7065 335.9219 88.666 335.4395 V
88.3765 335.7266 89.438 339.709 90.5488 341.9082 c
91.457 343.7031 91.8521 344.0547 93.0825 344.6348 c
94.3135 345.2148 99.2368 347.6992 100.8296 349.002 c
102.4224 350.3066 103.0742 352.2363 Y
104.5464 350.3066 106.4771 348.3984 V
106.0425 347.6992 96.5576 341.666 96.1235 341.3047 c
95.689 340.9414 94.9727 341.0254 94.4585 341.4492 c
f116.2266 346.541 m
115.8643 345.8887 111.6201 338.6777 110.5308 336.0898 c
109.9521 334.7168 109.3003 335.0039 108.9385 334.9316 c
108.5762 334.8594 107.418 334.6426 107.5381 333.3652 c
107.6245 332.4512 107.4541 332.0723 Y
100.7935 332.0723 100.1416 332.0723 V
100.4561 333.1328 101.167 334.498 104.0146 336.0195 c
104.9229 336.502 105.9941 337.5137 106.8149 338.7227 c
107.2461 339.3574 109.7588 343.8633 110.1938 344.9004 c
110.5439 345.7363 110.4346 347.0234 110.0005 347.75 c
109.5654 348.4727 108.8901 349.7266 107.9248 350.498 c
104.6904 353.0859 102.7603 355.1328 100.0327 360.418 c
99.5859 361.2852 100.1206 362.2695 95.4238 361.0215 c
84.1772 358.0293 75.9956 362.1543 75.6338 362.4707 C
75.9956 364.6172 76.8647 366.4277 75.5977 367.3691 C
74.9102 365.9922 74.2222 365.0156 73.0273 363.6758 c
72.6387 363.2402 72.1582 363.3867 71.2896 363.459 c
70.4209 363.5313 64.7739 364.291 63.8325 364.5078 c
63.4385 364.5996 61.8413 364.1094 62.7827 362.2656 c
62.9385 361.959 64.2222 359.6875 65.5703 357.666 c
66.2944 356.5801 65.5337 355.8926 65.7153 355.0605 c
65.8906 354.252 66.2944 353.9746 66.584 354.0469 c
66.8735 354.1191 68.0688 355.5547 69.021 354.5527 c
69.938 353.5879 70.5659 350.6914 70.7588 347.75 C
69.9624 347.6758 68.8286 348.0371 67.8145 348.834 c
66.8672 349.5781 66.0151 350.9609 64.9907 351.7285 c
63.9771 352.4883 63.5063 352.4551 62.7827 353.1035 c
62.1343 353.6895 61.479 354.1191 61.2622 355.9277 c
61.0454 357.7402 58.4146 363.625 58.0044 364.291 c
57.4248 365.2324 58.5352 367.1152 59.0181 367.6953 c
59.4448 368.207 60.3335 368.2617 61.395 368.5039 c
62.9741 368.8594 65.6421 369.998 66.5474 370.2988 C
63.0361 376.9492 67.2354 381.0039 67.7427 381.3398 C
68.9248 387.0859 71.145 390.248 72.0137 391.4785 C
74.0938 391.916 76.1514 392.1504 77.1543 396.3291 c
77.7178 398.6768 76.6479 401.1797 75.8511 401.9756 C
76.2856 399.8037 76.1572 397.4023 74.9824 395.6406 c
73.3169 393.1426 70.5176 393.4805 69.9385 393.4805 c
69.3594 393.4805 68.7896 393.5898 68.3462 393.1191 c
67.9595 392.709 66.6802 391.5508 65.812 391.0684 c
65.1387 390.6934 65.2559 390.3447 65.1836 389.7412 c
65.1143 389.1602 65.0415 388.7393 64.394 388.6367 c
63.7056 388.5273 62.6743 389.0332 62.1313 389.0332 c
61.0913 389.0332 61.7222 389.5918 62.3125 390.3906 c
62.873 391.1523 63.0283 390.7129 63.543 390.8262 c
64.1943 390.9707 64.5923 391.1777 65.0996 391.9492 c
65.8667 393.1172 63.9771 393.3223 63.4346 392.7441 c
62.8384 392.1074 62.0225 391.0078 61.5156 390.4297 c
61.0088 389.8477 60.5508 389.6191 60.2847 390.3203 c
60.0859 390.8438 59.8867 391.8398 59.8501 392.3457 C
58.2573 392.7813 59.6694 394.5195 Y
64.3398 400.2139 L
63.292 400.8809 64.0498 402.1201 v
64.4478 402.7734 67.272 406.1387 69.2622 407.5508 C
68.8647 408.6719 68.3574 409.7949 67.1992 410.9189 C
68.9727 410.5918 70.4209 410.6641 73.1724 407.7666 c
73.8857 407.0166 74.6626 407.251 74.4028 407.9854 c
74.1133 408.8076 73.6426 409.3613 72.6655 410.5547 C
81.3774 412.8594 85.5771 405.1973 86.2046 404.3301 C
84.5752 404.4375 83.2729 404.1816 82.4878 403.9316 c
81.812 403.7139 81.8604 403.4219 82.874 403.3027 c
85.7642 402.96 86.2046 402.8438 87.0366 402.5928 C
88.2319 401.2266 88.8833 397.8486 88.811 397.7051 C
87.6045 397.6309 86.0596 397.8975 84.3701 397.6563 c
83.0776 397.4717 83.5244 396.8984 84.0327 396.8359 c
85.9624 396.5957 87.7969 396.0645 89.2451 395.4355 C
89.7275 392.7813 89.6074 390.9707 Y
86.228 391.332 85.3359 391.2607 v
84.4424 391.1895 84.8867 390.4854 85.77 390.1738 c
86.5908 389.8848 88.2803 389.2578 89.3901 388.2441 C
89.3784 387.459 89.0522 385.541 88.7144 384.5762 c
88.3853 383.6367 88.6484 382.8086 90.1865 382.5 c
94.396 381.6582 97.9888 381.1074 104.4497 381.2441 c
115.8408 381.4863 119.6533 368.3574 114.5376 361.9863 c
112.1431 359.0059 112.0273 357.2559 112.2207 356.1953 c
112.7056 353.5313 114.1509 351.1504 116.6133 349.7012 c
117.915 348.9355 116.5884 347.1934 116.2266 346.541 c
f128.8735 394.8555 m
125.4551 391.9648 129.0796 386.4277 125.8804 382.1631 C
124.1426 379.2666 119.2915 376.2715 114.5859 379.1699 C
117.3369 380.1836 120.1299 382.4922 118.5679 386.916 c
116.5649 392.5879 113.9102 392.6836 110.7729 397.5107 c
108.3691 401.21 107.0562 410.8086 115.9609 413.9219 C
108.6494 409.3613 112.9932 401.0342 115.6719 398.6455 C
111.0137 409.4805 118.3022 414.502 122.6948 414.502 c
125.1084 414.502 128.0757 414.2617 129.8379 411.0752 c
132.3477 406.5371 128.6797 403.2051 126.749 403.0605 C
129.8379 404.5107 129.6875 407.3535 128.6313 408.8076 c
126.7012 411.4619 121.5845 410.2539 120.6675 407.0205 c
119.2671 402.082 123.1294 399.2979 124.5049 396.1113 C
126.459 398.8633 131.334 399.2012 133.4097 396.2559 C
131.3345 396.1592 129.7866 395.6289 128.8735 394.8555 c
f*U
1 g
53.6724 361.5996 m
53.6719 361.5977 53.6846 361.6182 53.7021 361.6563 C
53.7036 361.7041 53.6934 361.6934 53.6724 361.5996 c
fU*u
0 0 0 1 k
238.3623 493.729 m
238.3623 491.9507 L
232.0913 491.8574 229.8457 489.3301 229.8457 483.3384 c
229.8457 458.0649 L
229.8457 446.4575 222.4492 434.0093 202.1367 434.0093 c
184.2583 434.0093 175.085 444.2124 175.085 457.5972 c
175.085 484.9302 L
175.085 490.9209 173.3999 491.8574 167.0356 491.9507 c
167.0356 493.729 L
191.0923 493.729 L
191.0923 491.9507 L
190.249 491.9507 L
185.1016 491.9507 182.8545 490.5459 182.8545 485.1167 c
182.8545 459.0952 L
182.8545 446.4575 190.249 438.8755 204.1963 438.8755 c
214.7739 438.8755 225.5391 443.2759 225.5391 459.189 c
225.5391 480.9985 L
225.5391 489.9849 224.1348 491.5757 216.3647 491.9507 c
216.3647 493.729 L
238.3623 493.729 l
f*U
*u
250.6636 443.6499 m
250.6636 438.5024 251.8804 437.2847 256.9351 437.2847 c
256.9351 435.5063 L
238.1206 435.5063 L
238.1206 437.2847 L
242.2388 437.2847 244.3921 439.5317 244.3921 443.1821 c
244.3921 462.8389 L
244.3921 466.3022 244.0171 466.958 241.583 467.4263 c
238.4014 468.0806 L
238.4014 469.5786 L
249.1655 473.5103 L
250.6636 473.5103 L
250.6636 466.209 L
256.9351 470.1406 262.1768 473.6045 266.7637 473.6045 c
273.1299 473.6045 276.7783 468.9238 276.7783 459.563 c
276.7783 447.1128 276.124 444.6792 276.0313 441.0288 c
275.9375 438.5024 277.4355 437.2847 281.2725 437.2847 c
283.332 437.2847 L
283.332 435.5063 L
263.207 435.5063 L
263.207 437.2847 L
265.9209 437.3784 267.5117 438.0337 268.542 439.063 c
270.3203 440.8423 270.5078 447.6753 270.5078 460.1255 c
270.5078 467.6138 266.8574 469.9536 263.1133 469.9536 c
260.1172 469.9536 255.5313 467.332 250.6636 463.9619 C
250.6636 443.6499 l
f*U
*u
301.2354 442.6206 m
301.2354 439.3442 303.0146 437.2847 307.9736 437.2847 c
307.9736 435.5063 L
287.1934 435.5063 L
287.1934 437.2847 L
292.9043 437.2847 294.9629 439.1567 294.9629 444.1177 c
294.9629 462.9321 L
294.9629 466.583 294.4951 467.0513 292.0615 467.5195 c
287.6621 468.3623 L
287.6621 469.8594 L
299.8301 474.0718 L
301.2354 474.0718 L
301.2354 442.6206 l
f297.3965 495.1333 m
299.6436 495.1333 301.5146 493.5425 301.5146 491.5757 c
301.5146 489.6108 299.6436 488.019 297.3965 488.019 c
295.1504 488.019 293.3711 489.6108 293.3711 491.5757 c
293.3711 493.5425 295.1504 495.1333 297.3965 495.1333 c
f*U
*u
329.3496 434.6636 m
315.7754 465.7412 L
314.3711 469.0171 313.1543 470.1406 311.6582 470.4214 c
308.752 470.8887 L
308.752 472.5737 L
327.8516 472.5737 L
327.8516 470.8887 L
322.1387 470.7021 320.3633 469.9536 322.6074 465.5537 c
332.5313 442.2466 L
342.0801 463.8687 L
343.7656 467.707 342.9199 470.4214 336.0879 470.8887 c
336.0879 472.5737 L
352.373 472.5737 L
352.373 470.8887 L
348.8203 470.2349 346.7578 468.1748 344.9805 464.0557 c
332.0645 434.6636 L
329.3496 434.6636 l
f*U
*u
360.2402 461.7163 m
362.3965 470.4214 367.0762 471.8252 370.168 471.8252 c
374.6582 471.8252 378.4023 467.8003 379.4316 461.7163 c
360.2402 461.7163 L
f1 D
387.2949 459.2817 m
387.2949 461.4355 l
384.207 464.5239 384.4863 473.6045 371.8496 473.6045 c
360.4297 473.6045 353.7852 463.4946 353.7852 453.5728 c
353.7852 442.7144 360.8965 434.3833 370.0703 434.3833 c
376.9043 434.3833 382.8008 439.063 386.7324 444.0249 C
385.7031 445.1479 l
382.1465 440.936 378.4961 439.063 373.8164 439.063 c
366.4199 439.063 359.5859 445.6157 359.5859 455.3501 c
359.5859 456.5679 359.7754 457.8774 359.9609 459.2817 c
387.2949 459.2817 L
f*U
*u
0 D
405.3457 442.3394 m
405.3457 438.5024 406.748 437.2847 411.4297 437.2847 c
414.9883 437.2847 L
414.9883 435.5063 L
392.8008 435.5063 L
392.8008 437.2847 L
397.5762 437.3784 399.0742 439.3442 399.0742 444.3052 c
399.0742 465.9277 L
392.8008 468.1748 L
392.8008 469.7661 L
403.4727 473.5103 L
405.3457 473.5103 L
405.3457 463.5879 L
405.5332 463.5879 L
410.2129 471.2637 411.3359 473.042 414.4238 473.042 c
415.5488 473.042 415.8301 472.9487 417.6074 472.1987 c
418.543 471.8252 420.2285 471.4512 422.4766 470.7954 c
420.2285 465.1797 L
418.8242 465.3672 417.0469 465.8345 415.2676 466.6772 c
414.2383 467.1445 413.1152 467.6138 411.9922 467.6138 c
410.3066 467.6138 409.2754 466.4897 408.3398 465.1797 c
407.123 463.4946 406.0938 461.9038 405.3457 460.4995 C
405.3457 442.3394 l
f*U
*u
428.9395 444.9604 m
430.0605 439.3442 433.6172 436.1616 437.832 436.1616 c
441.5742 436.1616 444.4766 438.9702 444.4766 442.3394 c
444.4766 444.3052 444.0078 445.522 441.4805 448.0493 c
434.834 454.6948 427.4414 455.3501 427.4414 463.1206 c
427.4414 469.2979 432.3105 473.6045 439.4238 473.6045 c
441.9492 473.6045 444.5723 473.042 446.9102 472.106 c
447.0977 463.5879 L
445.5078 463.5879 L
444.8496 468.3623 441.7598 471.3569 438.0176 471.3569 c
434.9277 471.3569 432.3105 469.2046 432.3105 466.1147 c
432.3105 457.8774 449.7168 456.4741 449.7168 445.0542 c
449.7168 438.9702 444.6641 434.3833 438.1113 434.3833 c
436.334 434.3833 435.0215 434.6636 433.9922 435.0386 c
432.9629 435.3188 432.2168 435.6001 431.4648 435.6001 c
430.9043 435.6001 430.3438 435.2251 429.875 434.4761 c
428.4707 434.4761 L
427.4414 444.9604 L
428.9395 444.9604 l
f*U
*u
469.4961 442.6206 m
469.4961 439.3442 471.2734 437.2847 476.2344 437.2847 c
476.2344 435.5063 L
455.4531 435.5063 L
455.4531 437.2847 L
461.166 437.2847 463.2227 439.1567 463.2227 444.1177 c
463.2227 462.9321 L
463.2227 466.583 462.7559 467.0513 460.3203 467.5195 c
455.9219 468.3623 L
455.9219 469.8594 L
468.0898 474.0718 L
469.4961 474.0718 L
469.4961 442.6206 l
f465.6543 495.1333 m
467.9043 495.1333 469.7754 493.5425 469.7754 491.5757 c
469.7754 489.6108 467.9043 488.019 465.6543 488.019 c
463.4121 488.019 461.6328 489.6108 461.6328 491.5757 c
461.6328 493.5425 463.4121 495.1333 465.6543 495.1333 c
f*U
*u
502.9102 472.5737 m
501.4121 468.4556 L
489.5273 468.4556 L
489.5273 446.645 L
489.5273 440.7485 493.7383 438.7827 495.7031 438.7827 c
497.7617 438.7827 499.6367 440.3735 501.4121 443.4634 c
502.9102 442.0591 L
500.6641 437.1919 497.0137 434.3833 492.707 434.3833 c
487.1836 434.3833 483.2539 438.9702 483.2539 445.2407 c
483.2539 468.4556 L
478.9473 468.4556 L
478.9473 469.9536 L
482.5977 471.7319 485.7813 476.0376 487.9336 481.8418 c
489.5273 481.8418 L
489.5273 472.5737 L
502.9102 472.5737 l
f*U
*u
539.9375 462.1841 m
542.7441 469.2979 540.9648 470.7021 535.4434 470.8887 c
535.4434 472.5737 L
550.9805 472.5737 L
550.9805 470.8887 L
547.1445 470.4214 544.9922 467.8003 543.2148 463.4014 c
527.3008 423.7114 L
524.4922 416.7832 522.3398 413.6973 519.0645 413.6973 c
516.8164 413.6973 515.2266 415.0996 515.2266 416.9727 c
515.2266 420.8101 520.6523 419.875 522.9941 422.2144 c
524.0234 423.2446 525.4277 425.6782 526.1758 427.5493 c
528.9844 434.5708 L
514.4746 465.3672 L
512.6992 469.2046 511.0137 470.7954 507.0801 470.8887 c
507.0801 472.5737 L
525.8965 472.5737 L
525.8965 470.8887 L
520.1855 470.7954 519.5332 469.1104 521.4043 465.1797 c
531.9805 442.3394 L
539.9375 462.1841 l
f*U
*u
579.0107 456.9429 m
579.0107 464.9922 584.7197 471.3569 590.8955 471.3569 c
598.7607 471.3569 605.3135 462.2773 605.3135 451.606 c
605.3135 442.2466 599.042 436.6294 593.5186 436.6294 c
585.4678 436.6294 579.0107 445.6157 579.0107 456.9429 c
f1 D
571.9912 453.7593 m
571.9912 442.8071 580.8818 434.3833 592.4893 434.3833 c
603.6279 434.3833 612.333 442.9009 612.333 453.9458 c
612.333 465.0864 603.6279 473.6045 592.208 473.6045 c
582.4736 473.6045 571.9912 466.6772 571.9912 453.7593 c
f*U
*u
0 D
639.4775 468.4556 m
629.3682 468.4556 L
629.3682 442.8071 L
629.3682 438.5024 631.0537 437.2847 636.2959 437.2847 c
639.8525 437.2847 L
639.8525 435.5063 L
616.7334 435.5063 L
616.7334 437.2847 L
622.1611 437.2847 623.0986 438.5024 623.0986 443.7437 c
623.0986 468.4556 L
616.1709 468.4556 L
616.1709 470.0469 L
618.79 470.6089 621.0381 471.4512 623.0986 472.5737 c
623.0986 480.3438 624.7842 486.2407 630.3076 491.7632 c
634.8916 496.3506 639.29 498.4097 643.5967 498.4097 c
648.8389 498.4097 653.2393 495.4141 653.2393 494.0098 c
653.2393 493.2607 651.46 489.5176 650.7119 489.5176 c
649.3994 489.5176 645.9365 494.103 639.7588 494.103 c
633.0205 494.103 629.3682 488.7676 629.3682 479.6885 c
629.3682 472.5737 L
638.8232 472.5737 L
639.4775 468.4556 l
f*U
*u
1 D
0 g
7.5767 535.4238 m
7.5767 524.6343 L
7.1055 524.6343 L
-4.543 524.6353 L
-5.021 524.6353 L
-5.021 535.4238 L
-16.605 535.4238 L
-16.6055 524.6353 L
-16.8311 524.6353 L
-28.1875 524.6343 L
-28.189 535.4238 L
-28.4678 535.4238 L
-39.6777 535.4238 L
-39.6763 524.6353 L
-40.1064 524.6353 L
-51.3579 524.6353 L
-51.3579 535.4238 L
-51.7461 535.4238 L
-71.7271 535.4238 L
-71.728 435.0342 -71.728 435.4849 V
-28.915 420.6172 -12.165 451.3164 28.042 435.4849 C
28.042 437.0825 28.042 535.4238 Y
7.5767 535.4238 L
f0 D
5.458 501.8325 m
1.4033 493.7231 1.0176 485.5181 1.79 481.3662 C
-6.8018 483.5874 -9.6978 481.3667 Y
-9.5049 490.5381 5.458 501.8325 V
f-36.438 511.8237 m
-33.0259 513.2402 -33.1558 512.4512 -33.3491 511.4854 c
-33.542 510.5205 -34.1919 508.8369 -32.2866 509.2651 c
-27.0708 510.439 -22.4751 513.6875 -22.0547 513.9961 C
-22.0547 507.7207 L
-22.8188 507.3638 -28.2471 504.9468 -32.9629 504.6323 c
-37.3076 504.3423 -35.376 509.2168 Y
-35.7397 508.9785 -41.313 506.1284 -45.8984 506.3696 c
-51.4448 506.6621 -51.6904 509.7964 -51.1118 510.4727 C
-51.1118 509.9893 -50.3872 506.0317 -36.438 511.8237 c
f-54.0078 446.8071 m
-35.6655 441.6919 -22.9233 455.1099 -10.3735 456.8472 C
-24.0332 457.0396 -31.4668 451.3931 -35.9551 450.8618 C
-38.272 452.5513 -40.8711 456.7329 -41.7476 461.2876 c
-42.4712 465.0522 -46.2363 465.6802 Y
-46.8154 468.5283 L
-36.0522 466.9346 -34.1211 466.7427 V
-31.6113 462.7358 -26.8813 461.77 -24.564 461.77 C
-24.5068 468.561 -24.5156 468.9536 V
-23.9731 469.7109 -22.0547 470.4014 Y
-21.958 461.8667 L
-16.0693 461.8667 -11.5322 465.6313 -11.6289 469.2036 c
-11.7383 473.2612 -16.2397 476.7813 -23.4058 476.6367 c
-30.5977 476.4922 -33.1558 472.9683 -33.9277 471.7139 C
-42.4712 480.2324 -38.562 490.6348 Y
-45.9473 485.6626 -39.2856 473.0649 V
-46.2837 474.9478 -52.0283 471.2788 -51.9321 468.3354 C
-51.9805 465.6313 -49.856 463.5562 -45.6089 463.4111 C
-60.668 460.4185 -64.0469 469.0103 -56.8066 473.6445 C
-53.4282 473.0649 -53.4282 473.0649 -51.1118 472.5825 C
-58.4482 479.9194 -54.8936 488.9048 -48.9873 492.7583 C
-40.4922 494.3027 -36.2451 494.9302 Y
-32.1182 500.8672 -28.522 502.9907 V
-23.3096 503.4736 -5.1606 506.0801 Y
-22.127 490.5864 -5.8604 474.127 V
0.8247 474.127 8.7886 474.1147 Y
8.4507 471.665 7.9683 469.2515 V
6.5195 469.1069 5.7476 469.0469 5.1685 469.0103 C
4.9751 461.481 0.4385 456.5571 Y
8.9336 455.4956 14.6289 452.02 V
-21.8613 458.9712 -24.854 436.8638 -54.0078 446.8071 C
f*U
0 0 0 1 k
-40.6426 364.1729 m
-40.772 364.0371 -42.2793 364.4199 -42.6431 365.7588 C
-43.0264 367.1094 -42.5879 368.498 v
-42.145 369.9004 -40.3042 369.7637 -39.9956 368.6621 c
-39.7329 367.7285 -39.9165 365.9541 -41.3662 365.8564 C
-41.2529 365.3545 -41.48 364.9219 -40.6426 364.1729 C
f/BBAccumRotation (1.167527) XT
66.4106 399.4863 m
65.9351 399.7227 66.8423 400.4814 v
66.9526 400.5742 67.1284 400.3672 67.6558 400.3613 c
68.3657 400.3525 68.7378 400.5977 69.3267 401.3076 c
70.2173 402.3848 68.3608 402.7969 67.7583 402.2803 c
67.0962 401.7148 66.6216 401.126 66.0542 400.6084 c
65.1001 399.7598 66.4106 399.4863 v
fu3.6177 361.7578 m
9.8042 360.4277 10.1157 355.4473 6.9624 352.9121 C
4.2139 350.8496 -2.6143 350.0254 -4.9521 354.6074 C
-6.4302 353.541 -6.9453 351.835 -6.6934 349.7041 C
-7.3125 349.9355 -9.9028 353.6221 -6.0527 356.6689 C
11.7969 368.1758 8.916 387.5137 -6.1904 395.4727 C
-6.3779 395.5547 L
-20.0825 403.4277 -32.0723 396.2422 Y
-23.5991 404.7285 -8.9561 399.6797 -6.8496 398.627 C
-8.5337 400.0928 -9.4302 401.4375 v
-10.5913 403.1787 -10.5474 404.8418 Y
-16.3608 401.5967 -17.8604 406.582 Y
-22.8945 402.0449 -26.1616 405.7354 v
-29.0176 408.9648 -24.3936 413.3447 Y
-53.8804 403.666 -48.2915 387.0166 Y
-52.562 383.0938 -53.5176 373.6426 v
-54.603 362.9063 -49.2549 355.2695 -42.5732 357.3672 c
-41.0342 357.8506 -40.2778 358.585 -39.9868 359.3984 C
-40.3618 355.2236 -42.7593 354.5918 Y
-47.0112 356.5469 -49.2925 351.1934 -45.7241 349.6162 c
-41.2017 347.6182 -38.4336 353.4639 -38.165 354.543 c
-37.4028 357.6074 -37.3311 359.7734 -37.6719 364.75 c
-37.9624 368.9922 -36.9165 369.6328 -36.2192 369.749 c
-35.5215 369.8652 -34.0679 369.9219 -32.6157 365.5039 c
-31.1621 361.0889 -28.0269 360.4482 Y
-32.5664 367.8359 -26.252 374.6563 v
-23.3159 377.8271 -17.3291 379.6289 -18.4375 384.0684 C
-19.3633 382.4766 -21.1655 382.0117 v
-22.9673 381.5469 -26.4546 381.0234 Y
-18.085 384.9766 -16.5737 389.5107 V
-13.9585 385.1504 -17.4463 378.7578 V
-14.1245 379.9463 -10.5508 378.332 v
-1.4419 374.2959 -2.4092 361.3203 -13.9351 358.2266 c
-30.3384 353.8242 -24.3828 341.1357 -14.9883 340.3574 C
-15.9961 340.9961 -16.2251 344.8232 -14.5757 347.0938 C
-13.7524 347.8281 -12.2793 349.3096 -11.3447 346.1982 c
-9.6953 340.6982 -4.8828 340.252 -2.6499 340.9385 C
-3.2339 341.4316 -4.333 343.1055 -4.1963 344.0684 c
-3.9209 345.9922 -1.5181 343.9941 -0.6445 343.7471 c
5.8169 341.9141 9.2539 343.5156 9.6201 344.4805 C
8.1772 344.7793 8.4287 344.6152 7.5127 344.8477 c
6.6582 345.0605 5 346.2432 8.1084 346.9551 c
13.8149 348.2617 16.9536 354.1484 13.1963 358.6846 c
9.6089 363.0176 5.0859 362.3535 3.6177 361.7578 C
n*u
1 D
0 O
0 g
28.043 425.2041 m
-11.3438 441.7114 -26.6943 410.4346 -71.728 425.2041 C
-71.728 426.7998 -71.7266 325.1514 -71.728 325.1455 C
-16.4136 311.6787 -14.8188 341.0732 28.043 325.1455 C
28.0376 323.8467 28.0605 425.2134 28.043 425.2041 C
f0 D
-34.8145 347.6045 m
-30.0791 352.8857 -32.7998 357.3633 -34.9912 362.1689 c
-37.1836 366.9775 -35.4326 368.1221 Y
-35.5391 365.7822 -33.9814 364.0986 -32.5391 361.668 c
-26.2666 351.1143 -32.1289 347.5732 -34.8145 347.6045 C
f8.1084 346.9551 m
5 346.2432 6.6582 345.0605 7.5127 344.8477 c
8.4287 344.6152 8.1772 344.7793 9.6201 344.4805 C
9.2539 343.5156 5.8169 341.9141 -0.6445 343.7471 c
-1.5181 343.9941 -3.9209 345.9922 -4.1963 344.0684 c
-4.333 343.1055 -3.2339 341.4316 -2.6499 340.9385 C
-4.8828 340.252 -9.6953 340.6982 -11.3447 346.1982 c
-12.2793 349.3096 -13.7524 347.8281 -14.5757 347.0938 C
-16.2251 344.8232 -15.9961 340.9961 -14.9883 340.3574 C
-24.3828 341.1357 -30.3384 353.8242 -13.9351 358.2266 c
-2.4092 361.3203 -1.4419 374.2959 -10.5508 378.332 c
-14.1245 379.9463 -17.4463 378.7578 Y
-13.9585 385.1504 -16.5737 389.5107 Y
-18.085 384.9766 -26.4546 381.0234 Y
-22.9673 381.5469 -21.1655 382.0117 v
-19.3633 382.4766 -18.4375 384.0684 Y
-17.3291 379.6289 -23.3159 377.8271 -26.252 374.6563 c
-32.5664 367.8359 -28.0269 360.4482 Y
-31.1621 361.0889 -32.6157 365.5039 v
-34.0679 369.9219 -35.5215 369.8652 -36.2192 369.749 c
-36.9165 369.6328 -37.9624 368.9922 -37.6719 364.75 c
-37.3311 359.7734 -37.4028 357.6074 -38.165 354.543 c
-38.4336 353.4639 -41.2017 347.6182 -45.7241 349.6162 c
-49.2925 351.1934 -47.0112 356.5469 -42.7593 354.5918 C
-40.3618 355.2236 -39.9868 359.3984 V
-40.2778 358.585 -41.0342 357.8506 -42.5732 357.3672 c
-49.2549 355.2695 -54.603 362.9063 -53.5176 373.6426 c
-52.562 383.0938 -48.2915 387.0166 Y
-53.8804 403.666 -24.3936 413.3447 V
-29.0176 408.9648 -26.1616 405.7354 v
-22.8945 402.0449 -17.8604 406.582 Y
-16.3608 401.5967 -10.5474 404.8418 V
-10.5913 403.1787 -9.4302 401.4375 v
-8.5337 400.0928 -6.8496 398.627 Y
-8.9561 399.6797 -23.5991 404.7285 -32.0723 396.2422 C
-20.0825 403.4277 -6.3779 395.5547 V
-6.1904 395.4727 L
8.916 387.5137 11.7969 368.1758 -6.0527 356.6689 C
-9.9028 353.6221 -7.3125 349.9355 -6.6934 349.7041 C
-6.9453 351.835 -6.4302 353.541 -4.9521 354.6074 C
-2.6143 350.0254 4.2139 350.8496 6.9624 352.9121 C
10.1157 355.4473 9.8042 360.4277 3.6177 361.7578 C
5.0859 362.3535 9.6089 363.0176 13.1963 358.6846 c
16.9536 354.1484 13.8149 348.2617 8.1084 346.9551 c
f*U
ULB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
